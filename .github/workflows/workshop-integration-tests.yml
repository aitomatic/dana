# Workflow name that appears in GitHub Actions UI
name: Workshop Integration Tests

# Trigger conditions for the workflow
on:
  # Run on pull requests to main and develop branches
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
    # Only trigger when these paths are modified
    paths:
      - 'examples/workshop/**'  # Workshop example files
      - 'dana/**'              # Core library files
      - 'tests/integration/test_workshop_examples.py'
      - 'tests/integration/run_workshop_tests.py'
      - 'pyproject.toml'      # Project dependencies
      - '.github/workflows/workshop-integration-tests.yml' # This workflow file
  
  # Allow manual triggering with custom inputs
  workflow_dispatch:
    inputs:
      run_mcp_tests:
        description: 'Run MCP integration tests'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  PYTHON_VERSION: '3.12'  # Python version to use

jobs:
  workshop-tests-mock:
    name: Workshop Tests (Mock Mode)
    runs-on: ubuntu-latest
    
    steps:
    # Check out repository code
    - uses: actions/checkout@v4
    
    # Set up Python environment
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # Set up uv package manager for faster dependency installation
    - uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
        
    # Create and activate virtual environment, install project
    - name: Create virtual environment
      run: |
        uv venv .venv
        echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    # Install dependencies
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e .
        
    # Run core workshop integration tests
    - name: Run file validation tests
      run: |
        source .venv/bin/activate
        # Run file validation tests
        python tests/integration/run_workshop_tests.py --file-validation -v
        
    # Run core workshop functionality tests
    - name: Run core workshop functionality tests
      run: |
        source .venv/bin/activate
        python tests/integration/run_workshop_tests.py -k "builtin_reasoning or semantic_type_coercion or order_intelligence" -v
        
    # Test workshop examples that work in mock mode
    - name: Test workshop examples that work in mock mode
      run: |
        source .venv/bin/activate
        # Test examples that should work in mock mode
        python tests/integration/run_workshop_tests.py -k "not (mcp_resource or reasoning_agent)" --parametrized -v
        
  workshop-tests-mcp:
    name: Workshop Tests (MCP Integration)
    runs-on: ubuntu-latest
    # Only run MCP tests if manually triggered or if MCP-related files changed
    if: |
      github.event.inputs.run_mcp_tests == 'true' || 
      contains(github.event.pull_request.title, 'mcp') ||
      contains(github.event.pull_request.title, 'MCP') ||
      contains(github.event.pull_request.body, 'mcp') ||
      contains(github.event.pull_request.body, 'MCP')
    
    steps:
    # Check out repository code
    - uses: actions/checkout@v4
    
    # Set up Python environment
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # Set up uv package manager for faster dependency installation
    - uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
        
    # Create and activate virtual environment, install project
    - name: Create virtual environment
      run: |
        uv venv .venv
        echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    # Install dependencies
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e .
        
    # Run MCP-specific tests conditionally
    - name: Run MCP integration tests
      run: |
        source .venv/bin/activate
        python tests/integration/run_workshop_tests.py --with-mcp -k "mcp_resource or reasoning_agent" -v
      timeout-minutes: 10
      
  workshop-syntax-check:
    name: Workshop Syntax Validation
    runs-on: ubuntu-latest
    
    steps:
    # Check out repository code
    - uses: actions/checkout@v4
    
    # Set up Python environment
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # Set up uv package manager for faster dependency installation
    - uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
        
    # Create and activate virtual environment, install project
    - name: Create virtual environment
      run: |
        uv venv .venv
        echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    # Install dependencies
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e .
        
    # Run core workshop integration tests
    - name: Validate Dana workshop files
      run: |
        source .venv/bin/activate
        python tests/integration/run_workshop_tests.py --file-validation
        
    # Run core workshop functionality tests
    - name: Check for missing workshop files
      run: |
        source .venv/bin/activate
        python tests/integration/run_workshop_tests.py -k "workshop_file_existence" -v

  report-results:
    name: Report Test Results
    runs-on: ubuntu-latest
    needs: [workshop-tests-mock, workshop-syntax-check]
    if: always()
    
    steps:
    # Check test results
    - name: Check test results
      run: |
        echo "Workshop Tests (Mock): ${{ needs.workshop-tests-mock.result }}"
        echo "Syntax Validation: ${{ needs.workshop-syntax-check.result }}"
        
        if [[ "${{ needs.workshop-tests-mock.result }}" == "failure" ]]; then
          echo "‚ùå Workshop integration tests failed"
          exit 1
        elif [[ "${{ needs.workshop-syntax-check.result }}" == "failure" ]]; then
          echo "‚ùå Workshop syntax validation failed"
          exit 1
        else
          echo "‚úÖ All workshop tests passed"
        fi
        
    # Add PR comment on success
    - name: Add PR comment on success
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ‚úÖ Workshop Integration Tests Passed
            
            All Dana workshop integration tests passed successfully! üéâ
            
            **Tests Completed:**
            - ‚úÖ File validation and syntax checking
            - ‚úÖ Core workshop functionality 
            - ‚úÖ Workshop file structure validation
            
            Your changes maintain compatibility with all workshop examples.`
          })
        
    # Add PR comment on failure
    - name: Add PR comment on failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ‚ùå Workshop Integration Tests Failed
            
            The Dana workshop integration tests failed for this PR. Please check the following:
            
            - üîç **Syntax Validation**: Ensure all \`.na\` files have valid Dana syntax
            - üß™ **Integration Tests**: Verify workshop examples execute correctly
            - üìù **File Structure**: Check that expected workshop files exist
            
            ### How to run tests locally:
            \`\`\`bash
            # Activate virtual environment
            source .venv/bin/activate
            
            # Run validation script (simulates CI)
            python scripts/validate_workshop_ci.py
            
            # Or run specific test categories
            python tests/integration/run_workshop_tests.py --file-validation
            python tests/integration/run_workshop_tests.py -k "builtin_reasoning"
            \`\`\`
            
            ### For MCP-related changes:
            \`\`\`bash
            # Test MCP integration
            python tests/integration/run_workshop_tests.py --with-mcp -k "mcp_resource or reasoning_agent"
            \`\`\`
            
            Please fix the issues and push new commits to re-run the tests.`
          })