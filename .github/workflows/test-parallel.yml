# GitHub Action to run pytest in parallel across logical subsystems
# - PRIMARY TESTING WORKFLOW: Runs on push and pull requests
# - Runs on Python 3.12
# - Parallelizes tests into logical subsystem groups for faster CI/CD
# - Each job runs independently to maximize parallelization
# - For full test coverage, run locally with: uv run pytest -m "not live" tests/

name: PyTest Parallel (Primary)

on: 
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Dana Core Parser - Language parsing and AST generation
  test-dana-core-parser:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Core Parser
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/core/parser/ -m "not live and not deep" --tb=short -v --timeout=300 --durations=10

  # Dana Core Interpreter - Execution engine and built-in functions
  test-dana-core-interpreter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Core Interpreter
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/core/interpreter/ -m "not live and not deep" --tb=short -v --timeout=300 --durations=10

  # Dana Core Language Features - Structs, lambdas, pipelines
  test-dana-core-lang:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Core Language Features
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/core/lang/ tests/unit/core/pipeline/ tests/unit/core/runtime/ -m "not live and not deep" --tb=short -v --timeout=300 --durations=10

  # Dana Core System - Registry, types, errors, misc
  test-dana-core-system:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Core System
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/core/test_*.py tests/unit/core/stdlib/ tests/unit/core/misc/ tests/unit/core/reasoning/ -m "not live and not deep" --tb=short -v --timeout=300 --durations=10

  # Dana Core REPL - Interactive execution
  test-dana-core-repl:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Core REPL
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/core/test_repl*.py -m "not live and not deep" --tb=short -v --timeout=300 --durations=10

  # Dana Frameworks - POET and other frameworks
  test-dana-frameworks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Frameworks
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/frameworks/ -m "not live and not deep" --tb=short -v

  # Dana Common - Shared utilities and resources
  test-dana-common:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Common
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/common/ -m "not live and not deep" --tb=short -v

  # Dana Agent - Agent framework and capabilities
  test-dana-agent:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Agent
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/agent/ -m "not live and not deep" --tb=short -v

  # Dana Functional - Language tests (.na files)
  test-dana-functional:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Functional
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/functional/ -m "not live and not deep" --tb=short -v
    - name: Test Dana Files (.na via pytest)
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/test_na/ -m "not live and not deep" --tb=short -v

  # Dana Test NA - Language syntax and feature tests (.na files)
  test-dana-test-na:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Basic Syntax (.na files)
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/test_na/test_na_basic_syntax.py -m "not live and not deep" --tb=short -v
    - name: Test Dana Advanced Syntax (.na files)
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/test_na/test_na_advanced_syntax.py -m "not live and not deep" --tb=short -v
    - name: Test Dana Comprehensive (.na files)
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/test_na/test_na_comprehensive.py -m "not live and not deep" --tb=short -v

  # Dana Integration - End-to-end system integration
  test-dana-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Integration
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/integration/ -m "not live and not deep" --tb=short -v

  # Dana Regression - Known issues and expected failures
  test-dana-regression:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Regression
      env:
        DANA_MOCK_LLM: "true"
        DANA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/regression/ -m "not live and not deep" --tb=short -v

  # Summary job that depends on all test jobs
  test-summary:
    needs: [test-dana-core-parser, test-dana-core-interpreter, test-dana-core-lang, test-dana-core-system, test-dana-core-repl, test-dana-frameworks, test-dana-common, test-dana-agent, test-dana-functional, test-dana-test-na, test-dana-integration, test-dana-regression]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-dana-core-parser.result }}" == "failure" || 
              "${{ needs.test-dana-core-interpreter.result }}" == "failure" || 
              "${{ needs.test-dana-core-lang.result }}" == "failure" || 
              "${{ needs.test-dana-core-system.result }}" == "failure" || 
              "${{ needs.test-dana-core-repl.result }}" == "failure" || 
              "${{ needs.test-dana-frameworks.result }}" == "failure" || 
              "${{ needs.test-dana-common.result }}" == "failure" || 
              "${{ needs.test-dana-agent.result }}" == "failure" || 
              "${{ needs.test-dana-functional.result }}" == "failure" || 
              "${{ needs.test-dana-test-na.result }}" == "failure" || 
              "${{ needs.test-dana-integration.result }}" == "failure" || 
              "${{ needs.test-dana-regression.result }}" == "failure" ]]; then
          echo "One or more test jobs failed"
          exit 1
        else
          echo "All test jobs passed"
        fi 
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-summary-parallel
        path: |
          test-results/
        retention-days: 7 
