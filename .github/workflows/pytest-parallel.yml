# GitHub Action to run pytest in parallel across logical subsystems
# - PRIMARY TESTING WORKFLOW: Runs on push and pull requests
# - Runs on Python 3.12
# - Parallelizes tests into logical subsystem groups for faster CI/CD
# - Includes a catch-all job for tests that don't match explicit filters
# - Each job runs independently to maximize parallelization
# - For full test coverage, run locally with: uv run pytest -m "not live" tests/

name: PyTest Parallel (Primary)

on: 
  push:
    branches: [main, master, feat/llm-poet]
  pull_request:
    branches: [main, master]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Dana Parser - Language parsing and AST generation
  test-dana-parser:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Parser
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/sandbox/parser/ -m "not live and not deep" --tb=short -v

  # Dana Structs - Critical struct implementation tests
  test-dana-structs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Structs (comprehensive)
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Run struct tests comprehensively as they're critical
        uv run pytest tests/dana/sandbox/interpreter/test_struct_* -v --tb=short
        # Also run fast struct tests
        uv run pytest tests/dana/sandbox/interpreter/test_struct_* -m "not live and not deep" --tb=short -v

  # Dana Functions - Built-in functions and function handling
  test-dana-functions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Functions
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/sandbox/interpreter/functions/ -m "not live and not deep" --tb=short -v

  # Dana Imports - Module system and import handling
  test-dana-imports:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Imports
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/sandbox/interpreter/test_*import* tests/dana/sandbox/interpreter/test_dana_module* -m "not live and not deep" --tb=short -v

  # Dana Execution - Core execution and runtime features
  test-dana-execution:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Execution
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/sandbox/interpreter/ -m "not live and not deep" --tb=short -v \
          --ignore=tests/dana/sandbox/interpreter/functions/ \
          -k "not struct and not import and not dana_module"

  # Dana Sandbox Core - Sandbox utilities and context management
  test-dana-sandbox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Sandbox Core
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/sandbox/ -m "not live and not deep" --tb=short -v \
          --ignore=tests/dana/sandbox/parser/ \
          --ignore=tests/dana/sandbox/interpreter/

  # Dana Integration - REPL, transcoder, module system, .na files
  test-dana-integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Dana Integration (REPL, modules, na files)
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/repl/ tests/dana/integration/ tests/dana/module/ tests/dana/na/ tests/dana/ux/ -m "not live and not deep" --tb=short -v

  # Common Utilities - Graph, I/O, mixins, resources, logging
  test-common-utilities:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Common Utilities
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/common/ -m "not live and not deep" --tb=short -v

  # Agent Framework - Capabilities and resources
  test-agent-framework:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Agent Framework
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/agent/ -m "not live and not deep" --tb=short -v

  # POET Framework - Domain-driven function enhancement
  test-poet-framework:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test POET Framework
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/dana/poet/ -m "poet and not live and not deep" --tb=short -v

  # Execution Engine - Pipeline and reasoning
  test-execution-engine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Execution Engine
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/execution/ -m "not live and not deep" --tb=short -v

  # Catch-all for any tests not covered by the above groups
  test-miscellaneous:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # Updated version
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    - name: Install dependencies
      run: uv sync --extra dev
    - name: Test Miscellaneous (catch-all)
      env:
        OPENDXA_MOCK_LLM: "true"
        OPENDXA_USE_REAL_LLM: "false"
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Run tests that don't match any of the explicit subsystem filters
        # This includes any top-level test files and future additions
        set +e  # Allow commands to fail without stopping the script
        uv run pytest tests/ -m "not live and not deep" --tb=short -v \
          --ignore=tests/dana/ \
          --ignore=tests/common/ \
          --ignore=tests/agent/ \
          --ignore=tests/execution/
        exit_code=$?
        if [ $exit_code -eq 5 ]; then
          echo "✅ No miscellaneous tests found - all tests are covered by explicit subsystem jobs"
          echo "This is expected and indicates good test organization"
          exit 0
        elif [ $exit_code -ne 0 ]; then
          echo "❌ Tests failed with exit code $exit_code"
          exit $exit_code
        else
          echo "✅ Miscellaneous tests passed"
          exit 0
        fi

  # Summary job that depends on all test jobs
  test-summary:
    needs: [test-dana-parser, test-dana-structs, test-dana-functions, test-dana-imports, test-dana-execution, test-dana-sandbox, test-dana-integration, test-common-utilities, test-agent-framework, test-poet-framework, test-execution-engine, test-miscellaneous]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-dana-parser.result }}" == "failure" || 
              "${{ needs.test-dana-structs.result }}" == "failure" || 
              "${{ needs.test-dana-functions.result }}" == "failure" || 
              "${{ needs.test-dana-imports.result }}" == "failure" || 
              "${{ needs.test-dana-execution.result }}" == "failure" || 
              "${{ needs.test-dana-sandbox.result }}" == "failure" || 
              "${{ needs.test-dana-integration.result }}" == "failure" || 
              "${{ needs.test-common-utilities.result }}" == "failure" || 
              "${{ needs.test-agent-framework.result }}" == "failure" || 
              "${{ needs.test-poet-framework.result }}" == "failure" || 
              "${{ needs.test-execution-engine.result }}" == "failure" || 
              "${{ needs.test-miscellaneous.result }}" == "failure" ]]; then
          echo "One or more test jobs failed"
          exit 1
        else
          echo "All test jobs passed"
        fi 
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-summary-parallel
        path: |
          test-results/
        retention-days: 7 