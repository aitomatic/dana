# Workflow Orchestrator Dana Module
# Demonstrates nested imports: This module imports other Dana modules

import fraud_detector
import shipping_analyzer

def process_order(order_data: dict) -> dict:
    # Main workflow orchestration using imported Dana modules
    customer_id = order_data.get("customer_id", "Unknown")
    order_amount = order_data.get("order_amount", 0)
    
    log(f"Orchestrating order processing for {customer_id}")
    
    # Step 1: Fraud detection (imports risk_calculator internally)
    fraud_risk = fraud_detector.assess_fraud_risk(order_data)
    
    # Step 2: Shipping analysis 
    shipping_decision = shipping_analyzer.analyze_shipping(order_data)
    
    # Step 3: Final decision based on all assessments
    if "high" in fraud_risk.lower() or "critical" in fraud_risk.lower():
        status = "REJECTED"
        recommendations = "Order flagged for manual review due to high fraud risk"
    elif "restricted" in shipping_decision.lower():
        status = "PENDING"
        recommendations = "Order requires special shipping approval"
    else:
        status = "APPROVED"
        recommendations = "Order ready for processing"
    
    return {
        "status": status,
        "fraud_risk": fraud_risk,
        "shipping_decision": shipping_decision,
        "recommendations": recommendations
    } 