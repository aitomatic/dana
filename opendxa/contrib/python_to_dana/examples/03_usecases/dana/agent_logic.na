# Agent Logic Dana Module
# Provides AI-powered risk assessment and response planning

def assess_risk(sensor_data: dict) -> str:
    risk_context = f"""
        Assess the risk level based on these sensor readings and industrial safety standards

        Equipment Risk Assessment:
        - Location: {sensor_data.get('location', 'Unknown')}
        - Temperature: {sensor_data.get('temperature', 0)}째C (Normal: 20-90째C)
        - Pressure: {sensor_data.get('pressure', 0)} bar (Normal: 20-50 bar)
        - Vibration: {sensor_data.get('vibration', 0)} mm/s (Normal: <0.3 mm/s)
        
        Risk levels: Normal, Elevated, High, Critical
    """
    
    return reason(risk_context)

def plan_response(risk_level: str, sensor_data: dict) -> str:
    planning_context = f"""
        Create a detailed response plan for this risk scenario
        Risk Level: {risk_level}
        Equipment: {sensor_data.get('id', 'Unknown')} at {sensor_data.get('location', 'Unknown')}
        
        Need to plan appropriate response actions including:
        - Immediate safety measures
        - Maintenance scheduling
        - Monitoring adjustments
        - Escalation procedures
    """
    
    return reason(planning_context)

def assess_facility_risk(facility_stats: dict) -> str:
    facility_context = f"""
        Assess overall facility risk based on aggregated sensor statistics
        Facility-Wide Assessment:
        - Sensor Count: {facility_stats.get('sensor_count', 0)}
        - Average Temperature: {facility_stats.get('avg_temp', 0):.1f}째C
        - Vibration Anomalies: {facility_stats.get('vibration_anomalies', 0)}
        - Temperature Std Dev: {facility_stats.get('temp_std', 0):.1f}째C
    """
    
    return reason(facility_context) 