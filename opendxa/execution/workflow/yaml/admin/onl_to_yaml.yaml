# ONL to YAML workflow configuration
name: "ONL-to-YAML"
description: "Workflow to transform organized natural language into YAML format with validation"
version: 1.0
role: "YAML Formatter"
type: SEQUENTIAL
# Define nodes in the workflow
nodes:
  - id: CONVERT
    description: "Convert organized natural language directly into YAML"
    
  - id: VALIDATE
    description: "Validate YAML structure and syntax"

# Define prompts used in nodes
prompts:
  CONVERT: |
    Convert this organized natural language workflow into YAML format:
    {input}
    
    Your conversion must follow this exact YAML format:
    1. Top-level attributes:
       - name: String (required) - The workflow name
       - description: String (required) - Brief description of workflow purpose
       - version: Number (required) - Version identifier (e.g., 1.0)
       - role: String (required) - Role identifier for the workflow agent
       - type: String (required) - Must be "SEQUENTIAL" for sequential execution
       
    2. nodes: Array of objects (required), each containing:
       - id: String (required) - Unique node identifier in UPPERCASE
       - description: String (required) - Brief description of the node's purpose
       - type: String (optional) - Node type, defaults to "TASK" if not specified
       
    3. prompts: Object (required) with:
       - Key: Must match node IDs exactly
       - Value: Multi-line string using pipe (|) notation that includes:
         * Clear instructions
         * Variables in {{curly_braces}} format
         * References to other node outputs as {{NODE_ID.output}}
         
    Use proper YAML indentation (2 spaces per level) and include comments where helpful.
    
    IMPORTANT: Return ONLY the YAML content. Do not include any explanatory text before or after the YAML. Do not include any text explaining what you did or why.
    
  VALIDATE: |
    Validate the following YAML for correctness:
    {CONVERT.output}
    
    Perform these validation checks:
    1. Syntax validation:
       - Confirm proper indentation (2 spaces per level)
       - Verify all strings with special characters or multi-line content use proper pipe (|) notation
       - Check for any syntax errors (missing colons, incorrect lists, etc.)
    
    2. Structural validation:
       - Verify all required top-level keys are present: name, description, version, role, type
       - Confirm 'nodes' is an array with at least one entry, each with 'id' and 'description'
       - Validate 'prompts' contains entries that match all node IDs exactly
       
    3. Reference validation:
       - Check that all variable references use proper {{curly_brace}} syntax
       - Verify that all references to node outputs use correct {{NODE_ID.output}} format
       - Ensure referenced node IDs actually exist in the nodes section
    
    If any validation checks fail, provide the corrected YAML. If everything is valid, return the original YAML with a validation confirmation.