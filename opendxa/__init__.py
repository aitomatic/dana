"""Domain-Expert Agent (DXA) framework.

DXA is a framework for building domain-expert agents that combine:
- Domain-specific expertise
- LLM-powered reasoning
- Interactive capabilities

Key Components:
- StateManager: Manages agent state and conversation history
- DomainExpertise: Defines areas of expertise and capabilities
- ExpertResource: Implements domain-expert behavior
- ChainOfThoughtReasoning: Provides step-by-step reasoning patterns

Example:
    >>> from opendxa import DomainExpertise, ExpertResource
    >>> expertise = DomainExpertise(
    ...     name="mathematics",
    ...     description="Expert in algebra and calculus",
    ...     capabilities=["equation solving", "differentiation"],
    ...     keywords=["solve", "calculate", "equation"],
    ...     requirements=["mathematical expression"],
    ...     example_queries=["solve x^2 + 2x + 1 = 0"]
    ... )
"""

from .common import (
    AgentError,
    BaseIO,
    BaseMcpService,
    BaseResource,
    BaseState,
    BreadthFirstTraversal,
    CommunicationError,
    ConfigurationError,
    Cursor,
    DXA_LOGGER,
    DepthFirstTraversal,
    DirectedGraph,
    Edge,
    ExecutionState,
    GraphVisualizer,
    HttpTransportParams,
    HumanResource,
    IOFactory,
    LLMError,
    LLMInteractionAnalyzer,
    LLMInteractionVisualizer,
    LLMResource,
    Loggable,
    McpEchoService,
    McpResource,
    NetworkError,
    Node,
    NodeType,
    OpenDXAError,
    ReasoningError,
    ResourceError,
    ResourceResponse,
    ResourceUnavailableError,
    StateError,
    StateManager,
    StdioTransportParams,
    TopologicalTraversal,
    TraversalStrategy,
    ValidationError,
    WebSocketError,
    WoTResource,
    WorldState,
    get_base_path,
    get_class_by_name,
    get_config_path,
    load_agent_config,
)

from .execution import (
    ExecutionContext,
    ExecutionEdge,
    ExecutionGraph,
    ExecutionNode,
    ExecutionNodeStatus,
    ExecutionSignal,
    ExecutionSignalType,
    Objective,
    ObjectiveStatus,
    OptimalWorkflowExecutor,
    Pipeline,
    PipelineContext,
    PipelineExecutor,
    PipelineFactory,
    PipelineNode,
    PipelineStrategy,
    Plan,
    PlanExecutor,
    PlanFactory,
    PlanStrategy,
    Reasoning,
    ReasoningExecutor,
    ReasoningFactory,
    ReasoningStrategy,
    Workflow,
    WorkflowExecutor,
    WorkflowFactory,
    WorkflowStrategy,
)

from .agent import (
    Agent,
    AgentResource,
    AgentRuntime,
    AgentFactory,
    BaseCapability,
    AgentState,
    ExpertResource,
    ResourceFactory
)

__all__ = [
    # Common
    'AgentError',
    'BaseIO',
    'BaseMcpService',
    'BaseResource',
    'BaseState',
    'BreadthFirstTraversal',
    'CommunicationError',
    'ConfigurationError',
    'Cursor',
    'DXA_LOGGER',
    'DepthFirstTraversal', 
    'DirectedGraph',
    'Edge',
    'ExecutionState',
    'GraphVisualizer',
    'HttpTransportParams',
    'HumanResource',
    'IOFactory',
    'LLMError',
    'LLMInteractionAnalyzer',
    'LLMInteractionVisualizer',
    'LLMResource',
    'Loggable',
    'McpEchoService',
    'McpResource',
    'NetworkError',
    'Node',
    'NodeType',
    'OpenDXAError',
    'ReasoningError',
    'ResourceError',
    'ResourceResponse',
    'ResourceUnavailableError',
    'StateError',
    'StateManager',
    'StdioTransportParams',
    'TopologicalTraversal',
    'TraversalStrategy',
    'ValidationError',
    'WebSocketError',
    'WoTResource',
    'WorldState',
    'get_base_path',
    'get_class_by_name',
    'get_config_path',
    'load_agent_config',

    # Agent
    'Agent',
    'AgentResource',
    'AgentRuntime',
    'AgentFactory',
    'BaseCapability',
    'AgentState',
    'ExpertResource',   
    "ResourceFactory",

    # Execution
    "ExecutionContext",
    "ExecutionEdge",
    "ExecutionGraph",
    "ExecutionNode",
    "ExecutionSignal",
    "ExecutionSignalType",
    "Objective",
    "ObjectiveStatus",
    "Workflow",
    "WorkflowExecutor",
    "WorkflowFactory",
    'ExecutionContext',
    'ExecutionNodeStatus',
    'OptimalWorkflowExecutor',
    'Pipeline',
    'PipelineContext',
    'PipelineExecutor',
    'PipelineFactory',
    'PipelineNode',
    'PipelineStrategy',
    'Plan',
    'PlanExecutor',
    'PlanFactory',
    'PlanStrategy',
    'Reasoning',
    'ReasoningExecutor',
    'ReasoningFactory',
    'ReasoningStrategy',
    'Workflow',
    'WorkflowExecutor',
    'WorkflowFactory',
    'WorkflowStrategy',
]