// DANA language grammar definition

%import common.WS
%import common.NEWLINE
%import common.CNAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.C_COMMENT
%import common.CPP_COMMENT

%declare INDENT DEDENT

start: program

program: statement*

statement: assignment
        | conditional
        | while_loop
        | for_loop
        | function_call
        | print_statement
        | bare_identifier
        | break_stmt
        | continue_stmt
        | function_def
        | NEWLINE

assignment: identifier "=" expression -> assignment

conditional: "if" expression ":" NEWLINE INDENT statement+ DEDENT ["else" ":" NEWLINE INDENT statement+ DEDENT] -> conditional

while_loop: "while" expression ":" NEWLINE INDENT statement+ DEDENT -> while_loop

for_loop: "for" identifier "in" expression ":" NEWLINE INDENT statement+ DEDENT -> for_loop

function_call: identifier "(" [expression ("," expression)*] ")" -> function_call

print_statement: "print" "(" expression ")" -> print_statement

bare_identifier: identifier -> bare_identifier

break_stmt: "break" -> break_stmt

continue_stmt: "continue" -> continue_stmt

function_def: "def" identifier "(" [identifier ("," identifier)*] ")" ":" NEWLINE INDENT statement+ DEDENT -> function_def

expression: or_expr

or_expr: and_expr ("or" and_expr)*

and_expr: not_expr ("and" not_expr)*

not_expr: "not" not_expr -> not_expr
        | comparison

comparison: sum_expr (comparison_op sum_expr)*

comparison_op: "==" | "!=" | "<" | ">" | "<=" | ">="

sum_expr: product_expr (sum_op product_expr)*

sum_op: "+" | "-"

product_expr: unary_expr (product_op unary_expr)*

product_op: "*" | "/" | "%"

unary_expr: "-" unary_expr -> neg_expr
          | primary

primary: identifier
    | literal
    | "(" expression ")"
    | function_call

identifier: [scope_prefix "."] CNAME -> identifier

scope_prefix: "private" | "public" | "protected"

literal: string
       | number
       | boolean
       | null
       | fstring
       | list
       | dict
       | set

string: ESCAPED_STRING -> string

number: NUMBER -> number

boolean: "true" -> true
       | "false" -> false

null: "null" -> null

fstring: "f" ESCAPED_STRING -> fstring

list: "[" [expression ("," expression)*] "]" -> list

dict: "{" [key_value_pair ("," key_value_pair)*] "}" -> dict

key_value_pair: expression ":" expression -> key_value_pair

set: "{" [expression ("," expression)*] "}" -> set

%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT
