# Comprehensive Enhanced Coercion System Tests
# Tests the improved behavior after removing the old type coercion system
# These tests verify expected behavior and will catch regressions

log("🧪 === ENHANCED COERCION SYSTEM TESTS ===")

# Test 1: Float to Int Coercion (NOW WORKS!)
log("📋 Test 1: Float to Int Coercion")

x: int = 3.9832958235
assert x == 3  # Should truncate, not round
log(f"✅ float 3.98... → int {x}")

y: int = 42.0  
assert y == 42
log(f"✅ float 42.0 → int {y}")

z: int = -7.9
assert z == -7  # Negative truncation
log(f"✅ float -7.9 → int {z}")

log("---")

# Test 2: Enhanced Boolean Coercion (SEMANTIC UNDERSTANDING)
log("📋 Test 2: Enhanced Boolean Coercion")

# Zero representations should be False (semantic)
zero_str: bool = "0"
assert zero_str == False
log(f"✅ '0' → {zero_str}")

zero_decimal: bool = "0.0"
assert zero_decimal == False  
log(f"✅ '0.0' → {zero_decimal}")

false_str: bool = "false"
assert false_str == False
log(f"✅ 'false' → {false_str}")

# Conversational patterns
no_way: bool = "no way"
assert no_way == False
log(f"✅ 'no way' → {no_way}")

yes_please: bool = "yes please"
assert yes_please == True
log(f"✅ 'yes please' → {yes_please}")

nope: bool = "nope"
assert nope == False
log(f"✅ 'nope' → {nope}")

log("---")

# Test 3: String to Type Assignments (NOW WORK!)
log("📋 Test 3: String to Type Assignments")

decision: bool = "1"
assert decision == True
log(f"✅ bool assignment: '1' → {decision}")

count: int = "5"
assert count == 5
log(f"✅ int assignment: '5' → {count}")

temp: float = "98.6"
assert temp == 98.6
log(f"✅ float assignment: '98.6' → {temp}")

log("---")

# Test 4: Bool to String Conversion (Lowercase)
log("📋 Test 4: Bool to String Conversion")

true_str: str = True
assert true_str == "true"
log(f"✅ True → '{true_str}'")

false_str: str = False
assert false_str == "false"
log(f"✅ False → '{false_str}'")

log("---")

# Test 5: Semantic Equivalence (ENHANCED)
log("📋 Test 5: Semantic Equivalence")

# These should work with semantic comparison
result1 = ("0" == False)  # Should be True with semantic equals
result2 = ("1" == True)   # Should be True with semantic equals

log(f"'0' == False: {result1}")
log(f"'1' == True: {result2}")

log("---")

# Test 6: POET-Enhanced Reason Function
log("📋 Test 6: POET-Enhanced Reason Function")

# Boolean context
decision_bool: bool = reason("Should we proceed with this test?")
log(f"✅ Boolean reason: {decision_bool} (type: {type(decision_bool)})")

# Integer context  
count_int: int = reason("How many planets are in our solar system?")
log(f"✅ Integer reason: {count_int} (type: {type(count_int)})")

# Float context
pi_float: float = reason("What is the value of pi?")
log(f"✅ Float reason: {pi_float} (type: {type(pi_float)})")

# String context (detailed)
explanation: str = reason("Explain why the sky is blue.")
log(f"✅ String reason: {explanation[:50]}... (type: {type(explanation)})")

# Dict context (JSON)
planet_info: dict = reason("Give me information about Mars including diameter and distance from Earth.")
log(f"✅ Dict reason: {planet_info} (type: {type(planet_info)})")

# List context (JSON array)
planets: list = reason("List the first 4 planets from the sun.")
log(f"✅ List reason: {planets} (type: {type(planets)})")

log("---")

# Test 7: Complex Mixed Type Operations
log("📋 Test 7: Complex Mixed Type Operations")

# Verify everything works together
mixed_result: float = 3.14 + int("2") + float("1.5")
assert abs(mixed_result - 6.64) < 0.0001  # Use approximate equality for floating point
log(f"✅ Mixed operations: 3.14 + int('2') + float('1.5') = {mixed_result}")

# String building with coercion
total: int = 42
message: str = "Count: " + str(total)
log(f"✅ String building: '{message}'")

log("---")

log("🎉 === ALL ENHANCED COERCION TESTS PASSED ===")
log("✅ Float to int coercion working")
log("✅ Semantic boolean understanding working") 
log("✅ String to type assignments working")
log("✅ Bool to string conversion working")
log("✅ POET-enhanced context-aware reasoning working")
log("✅ Mixed type operations working")
log("")
log("🚀 Enhanced coercion system is fully functional!")
log("🛡️ These tests will catch any regressions to the old inferior behavior.") 