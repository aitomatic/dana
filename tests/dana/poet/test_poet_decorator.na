# Test file for POET decorator functionality in Dana
# This file contains various test functions decorated with @poet to verify:
# 1. Basic decorator functionality
# 2. Context handling
# 3. Metadata preservation
# 4. Function overwriting
# 5. Error handling
# 6. Namespace handling
# 7. Decorator chaining

@poet(domain="test_domain")
def test_basic(x):
    """Test basic POET decorator functionality."""
    return x * 2

@poet(domain="test_domain")
def test_context(x):
    """Test POET decorator with context handling."""
    context.set("test_value", x)
    return x * 2

@poet(domain="test_domain", retries=3, timeout=5)
def test_metadata(x):
    """Test POET decorator metadata preservation."""
    return x * 2

@poet(domain="test_domain")
def test_overwrite(x):
    """Test POET decorator function overwriting."""
    return x * 2

@poet(domain="test_domain", overwrite=True)
def test_overwrite(x):
    """Test POET decorator function overwriting."""
    return x * 3

@poet(domain="test_domain")
def test_error(x):
    """Test POET decorator error handling."""
    raise ValueError("Test error")

@poet(domain="test_domain", namespace="custom")
def test_namespace(x):
    """Test POET decorator namespace handling."""
    return x * 2

@poet(domain="test_domain")
@poet(domain="test_domain2")
def test_chain(x):
    """Test chaining multiple POET decorators."""
    return x * 2 