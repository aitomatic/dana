# Simple test for dual delivery system: return (lazy) vs deliver (eager)
# Copyright © 2025 Aitomatic, Inc.

# Track execution timing using a list to simulate global state
execution_tracker = [0]

def expensive_operation():
    execution_tracker[0] = execution_tracker[0] + 1
    # Simulate expensive computation
    result = 0
    for i in range(1000):
        result = result + i
    return f"expensive_result_{execution_tracker[0]}"

# Test 1: Return creates lazy Promise[T]
def lazy_function():
    return expensive_operation()

# Test 2: Deliver executes eagerly
def eager_function():
    deliver expensive_operation()

print("=== Testing Dual Delivery System ===")

# Reset execution count
execution_tracker[0] = 0

# Test lazy execution with return
print("1. Testing lazy execution with return...")
lazy_result = lazy_function()
print(f"   Function returned immediately, execution_count: {execution_tracker[0]}")
print(f"   Result type: {type(lazy_result)}")

# Access the lazy result to trigger execution
lazy_value = lazy_result
print(f"   After accessing result, execution_count: {execution_tracker[0]}")
print(f"   Lazy value: {lazy_value}")

# Test eager execution with deliver
print("\n2. Testing eager execution with deliver...")
execution_tracker[0] = 0
eager_result = eager_function()
print(f"   Function executed immediately, execution_count: {execution_tracker[0]}")
print(f"   Result type: {type(eager_result)}")
print(f"   Eager value: {eager_result}")

# Test 3: Multiple lazy operations
print("\n3. Testing multiple lazy operations...")
execution_tracker[0] = 0

def lazy_a():
    return expensive_operation()

def lazy_b():
    return expensive_operation()

def lazy_c():
    return expensive_operation()

# Create multiple lazy promises
a = lazy_a()
b = lazy_b()
c = lazy_c()

print(f"   Created 3 lazy promises, execution_count: {execution_tracker[0]}")

# Access them in parallel (should trigger parallel execution)
result = a + " " + b + " " + c
print(f"   After accessing all promises, execution_count: {execution_tracker[0]}")
print(f"   Combined result: {result}")

# Test 4: Verify basic Promise transparency
print("\n4. Testing basic Promise transparency...")
def get_number():
    return 42

def get_string():
    return "hello"

# Test arithmetic operations
num_result = get_number()
assert num_result + 10 == 52
assert num_result * 2 == 84

# Test string operations
str_result = get_string()
assert str_result + " world" == "hello world"

print("   ✓ Basic Promise transparency verified")

# Test 5: Conditional dual delivery
print("\n5. Testing conditional dual delivery...")
def conditional_function(use_eager):
    if use_eager:
        deliver "eager_result"
    else:
        return "lazy_result"

# Test eager path
eager_conditional = conditional_function(true)
assert eager_conditional == "eager_result"

# Test lazy path
lazy_conditional = conditional_function(false)
assert lazy_conditional == "lazy_result"

print("   ✓ Conditional dual delivery works")

print("\n=== All Dual Delivery Tests Passed! ===")
print("✓ return creates lazy Promise[T] objects")
print("✓ deliver executes eagerly")
print("✓ Basic Promise transparency maintained")
print("✓ Parallel execution of multiple promises")
print("✓ Conditional dual delivery works") 