# Test: Nested Comprehensions
# Purpose: Test nested comprehensions and complex comprehension patterns
# Category: Advanced Syntax - Comprehensions

log("Starting Nested Comprehensions test")

# Test 1: Nested list comprehensions
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened = [item for row in matrix for item in row]
assert flattened == [1, 2, 3, 4, 5, 6, 7, 8, 9], f"Expected [1, 2, 3, 4, 5, 6, 7, 8, 9], got {flattened}"
log("✅ Nested list comprehensions works")

# Test 2: Nested list comprehensions with conditions
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
even_numbers = [item for row in matrix for item in row if item % 2 == 0]
assert even_numbers == [2, 4, 6, 8], f"Expected [2, 4, 6, 8], got {even_numbers}"
log("✅ Nested list comprehensions with conditions works")

# Test 3: Nested list comprehensions with transformations
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
squared_even = [item * item for row in matrix for item in row if item % 2 == 0]
assert squared_even == [4, 16, 36, 64], f"Expected [4, 16, 36, 64], got {squared_even}"
log("✅ Nested list comprehensions with transformations works")

# Test 4: Nested set comprehensions
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
unique_even = {item for row in matrix for item in row if item % 2 == 0}
assert unique_even == {2, 4, 6, 8}, f"Expected {2, 4, 6, 8}, got {unique_even}"
log("✅ Nested set comprehensions works")

# Test 5: Nested dictionary comprehensions
data = [{"name": "Alice", "scores": [85, 90, 88]}, {"name": "Bob", "scores": [92, 87, 91]}]
all_scores = {f"{person['name']}_{i}": score for person in data for i, score in enumerate(person['scores'])}
expected = {"Alice_0": 85, "Alice_1": 90, "Alice_2": 88, "Bob_0": 92, "Bob_1": 87, "Bob_2": 91}
assert all_scores == expected, f"Expected {expected}, got {all_scores}"
log("✅ Nested dictionary comprehensions works")

# Test 6: Mixed nested comprehensions (list of sets)
sets_list = [{1, 2, 3}, {4, 5, 6}, {7, 8, 9}]
all_numbers = [item for set_item in sets_list for item in set_item]
assert all_numbers == [1, 2, 3, 4, 5, 6, 7, 8, 9], f"Expected [1, 2, 3, 4, 5, 6, 7, 8, 9], got {all_numbers}"
log("✅ Mixed nested comprehensions (list of sets) works")

# Test 7: Nested comprehensions with tuples
points = [(1, 2), (3, 4), (5, 6)]
coordinates = [coord for point in points for coord in point]
assert coordinates == [1, 2, 3, 4, 5, 6], f"Expected [1, 2, 3, 4, 5, 6], got {coordinates}"
log("✅ Nested comprehensions with tuples works")

# Test 8: Nested comprehensions with string operations
words = ["hello", "world", "python"]
characters = [char for word in words for char in word]
assert characters == ["h", "e", "l", "l", "o", "w", "o", "r", "l", "d", "p", "y", "t", "h", "o", "n"], f"Expected ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'p', 'y', 't', 'h', 'o', 'n'], got {characters}"
log("✅ Nested comprehensions with string operations works")

# Test 9: Nested comprehensions with conditional logic
numbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
filtered_and_transformed = [item * 2 for row in numbers for item in row if item > 5]
assert filtered_and_transformed == [12, 14, 16, 18], f"Expected [12, 14, 16, 18], got {filtered_and_transformed}"
log("✅ Nested comprehensions with conditional logic works")

# Test 10: Nested comprehensions with function calls
def square(x: int) -> int {
    return x * x
}

def is_even(x: int) -> bool {
    return x % 2 == 0
}

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
squared_even_numbers = [square(item) for row in matrix for item in row if is_even(item)]
assert squared_even_numbers == [4, 16, 36, 64], f"Expected [4, 16, 36, 64], got {squared_even_numbers}"
log("✅ Nested comprehensions with function calls works")

# Test 11: Nested comprehensions with lambda functions
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
lambda_transformed = [(lambda x: x * 3)(item) for row in matrix for item in row if (lambda x: x % 2 == 1)(item)]
assert lambda_transformed == [3, 9, 15, 21, 27], f"Expected [3, 9, 15, 21, 27], got {lambda_transformed}"
log("✅ Nested comprehensions with lambda functions works")

# Test 12: Nested comprehensions with complex data structures
nested_data = [
    {"name": "Alice", "grades": [85, 90, 88]},
    {"name": "Bob", "grades": [92, 87, 91]},
    {"name": "Charlie", "grades": [78, 85, 82]}
]
high_scores = [grade for student in nested_data for grade in student["grades"] if grade >= 85]
assert high_scores == [85, 90, 88, 92, 87, 91, 85], f"Expected [85, 90, 88, 92, 87, 91, 85], got {high_scores}"
log("✅ Nested comprehensions with complex data structures works")

# Test 13: Nested comprehensions with string formatting
names = ["Alice", "Bob", "Charlie"]
titles = ["Dr.", "Mr.", "Ms."]
formatted_names = [f"{title} {name}" for title in titles for name in names]
expected = ["Dr. Alice", "Dr. Bob", "Dr. Charlie", "Mr. Alice", "Mr. Bob", "Mr. Charlie", "Ms. Alice", "Ms. Bob", "Ms. Charlie"]
assert formatted_names == expected, f"Expected {expected}, got {formatted_names}"
log("✅ Nested comprehensions with string formatting works")

# Test 14: Nested comprehensions with mathematical operations
coordinates = [(1, 2), (3, 4), (5, 6)]
distances = [(x * x + y * y) ** 0.5 for x, y in coordinates]
assert distances == [2.23606797749979, 5.0, 7.810249675906654], f"Expected [2.23606797749979, 5.0, 7.810249675906654], got {distances}"
log("✅ Nested comprehensions with mathematical operations works")

# Test 15: Nested comprehensions with type checking
mixed_data = [[1, "hello", 3.14], [true, 42, "world"], [false, 2.5, 100]]
integers_only = [item for row in mixed_data for item in row if type(item) == int]
assert integers_only == [1, 42, 100], f"Expected [1, 42, 100], got {integers_only}"
log("✅ Nested comprehensions with type checking works")

# Test 16: Nested comprehensions with list operations
lists_of_lists = [[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]
lengths = [len(sublist) for sublist in lists_of_lists]
sum_of_lengths = sum(lengths)
assert sum_of_lengths == 10, f"Expected 10, got {sum_of_lengths}"
log("✅ Nested comprehensions with list operations works")

# Test 17: Nested comprehensions with dictionary operations
data = [
    {"category": "A", "items": [1, 2, 3]},
    {"category": "B", "items": [4, 5]},
    {"category": "C", "items": [6, 7, 8, 9]}
]
categorized_items = {f"{entry['category']}_{i}": item for entry in data for i, item in enumerate(entry["items"])}
expected = {"A_0": 1, "A_1": 2, "A_2": 3, "B_0": 4, "B_1": 5, "C_0": 6, "C_1": 7, "C_2": 8, "C_3": 9}
assert categorized_items == expected, f"Expected {expected}, got {categorized_items}"
log("✅ Nested comprehensions with dictionary operations works")

# Test 18: Nested comprehensions with set operations
sets_of_numbers = [{1, 2, 3}, {3, 4, 5}, {5, 6, 7}]
all_unique = {item for set_item in sets_of_numbers for item in set_item}
assert all_unique == {1, 2, 3, 4, 5, 6, 7}, f"Expected {1, 2, 3, 4, 5, 6, 7}, got {all_unique}"
log("✅ Nested comprehensions with set operations works")

# Test 19: Nested comprehensions with tuple unpacking
pairs = [(1, "a"), (2, "b"), (3, "c")]
numbers_and_letters = [f"{num}{letter}" for num, letter in pairs]
assert numbers_and_letters == ["1a", "2b", "3c"], f"Expected ['1a', '2b', '3c'], got {numbers_and_letters}"
log("✅ Nested comprehensions with tuple unpacking works")

# Test 20: Nested comprehensions with conditional expressions
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
parity_labels = ["even" if item % 2 == 0 else "odd" for row in matrix for item in row]
expected = ["odd", "even", "odd", "even", "odd", "even", "odd", "even", "odd"]
assert parity_labels == expected, f"Expected {expected}, got {parity_labels}"
log("✅ Nested comprehensions with conditional expressions works")

# Test 21: Nested comprehensions with empty collections
empty_lists = [[], [1, 2], [], [3, 4, 5]]
non_empty_items = [item for sublist in empty_lists for item in sublist]
assert non_empty_items == [1, 2, 3, 4, 5], f"Expected [1, 2, 3, 4, 5], got {non_empty_items}"
log("✅ Nested comprehensions with empty collections works")

# Test 22: Nested comprehensions with range
ranges = [range(3), range(2, 5), range(1, 6, 2)]
all_numbers = [num for r in ranges for num in r]
assert all_numbers == [0, 1, 2, 2, 3, 4, 1, 3, 5], f"Expected [0, 1, 2, 2, 3, 4, 1, 3, 5], got {all_numbers}"
log("✅ Nested comprehensions with range works")

# Test 23: Nested comprehensions with string splitting
sentences = ["hello world", "python programming", "dana language"]
words = [word for sentence in sentences for word in sentence.split()]
assert words == ["hello", "world", "python", "programming", "dana", "language"], f"Expected ['hello', 'world', 'python', 'programming', 'dana', 'language'], got {words}"
log("✅ Nested comprehensions with string splitting works")

# Test 24: Nested comprehensions with boolean operations
boolean_matrix = [[true, false, true], [false, true, false], [true, true, false]]
true_positions = [(i, j) for i, row in enumerate(boolean_matrix) for j, value in enumerate(row) if value]
assert true_positions == [(0, 0), (0, 2), (1, 1), (2, 0), (2, 1)], f"Expected [(0, 0), (0, 2), (1, 1), (2, 0), (2, 1)], got {true_positions}"
log("✅ Nested comprehensions with boolean operations works")

# Test 25: Nested comprehensions with complex filtering
data = [
    {"name": "Alice", "age": 25, "scores": [85, 90, 88]},
    {"name": "Bob", "age": 30, "scores": [92, 87, 91]},
    {"name": "Charlie", "age": 22, "scores": [78, 85, 82]}
]
high_scores_from_adults = [score for person in data for score in person["scores"] if person["age"] >= 25 and score >= 85]
assert high_scores_from_adults == [85, 90, 88, 92, 87, 91], f"Expected [85, 90, 88, 92, 87, 91], got {high_scores_from_adults}"
log("✅ Nested comprehensions with complex filtering works")

log("Nested Comprehensions test completed successfully") 