# Test: Comparison Expressions
# Purpose: Test comparison operators and expressions
# Category: Basic Syntax - Expressions and Operations

log("Starting Comparison Expressions test")

# Test 1: Basic equality comparison
result = 5 == 5
assert result == True, f"Expected True, got {result}"
log("✅ Basic equality comparison works")

# Test 2: Basic inequality comparison
result = 5 != 3
assert result == True, f"Expected True, got {result}"
log("✅ Basic inequality comparison works")

# Test 3: Basic less than comparison
result = 3 < 5
assert result == True, f"Expected True, got {result}"
log("✅ Basic less than comparison works")

# Test 4: Basic greater than comparison
result = 5 > 3
assert result == True, f"Expected True, got {result}"
log("✅ Basic greater than comparison works")

# Test 5: Basic less than or equal comparison
result = 5 <= 5
assert result == True, f"Expected True, got {result}"
log("✅ Basic less than or equal comparison works")

# Test 6: Basic greater than or equal comparison
result = 5 >= 5
assert result == True, f"Expected True, got {result}"
log("✅ Basic greater than or equal comparison works")

# Test 7: String equality comparison
result = "hello" == "hello"
assert result == True, f"Expected True, got {result}"
log("✅ String equality comparison works")

# Test 8: String inequality comparison
result = "hello" != "world"
assert result == True, f"Expected True, got {result}"
log("✅ String inequality comparison works")

# Test 9: String less than comparison (lexicographic)
result = "apple" < "banana"
assert result == True, f"Expected True, got {result}"
log("✅ String less than comparison works")

# Test 10: String greater than comparison (lexicographic)
result = "zebra" > "apple"
assert result == True, f"Expected True, got {result}"
log("✅ String greater than comparison works")

# Test 11: Boolean equality comparison
result = True == True
assert result == True, f"Expected True, got {result}"
log("✅ Boolean equality comparison works")

# Test 12: Boolean inequality comparison
result = True != False
assert result == True, f"Expected True, got {result}"
log("✅ Boolean inequality comparison works")

# Test 13: None equality comparison
result = None == None
assert result == True, f"Expected True, got {result}"
log("✅ None equality comparison works")

# Test 14: None inequality comparison
result = None != 5
assert result == True, f"Expected True, got {result}"
log("✅ None inequality comparison works")

# Test 15: Float equality comparison
result = 3.14 == 3.14
assert result == True, f"Expected True, got {result}"
log("✅ Float equality comparison works")

# Test 16: Float inequality comparison
result = 3.14 != 2.718
assert result == True, f"Expected True, got {result}"
log("✅ Float inequality comparison works")

# Test 17: Mixed type comparisons
result = 5 == 5.0
assert result == True, f"Expected True, got {result}"
log("✅ Mixed type equality comparison works")

# Test 18: Negative number comparisons
result = -5 < 5
assert result == True, f"Expected True, got {result}"
log("✅ Negative number comparison works")

# Test 19: Zero comparisons
result = 0 == 0.0
assert result == True, f"Expected True, got {result}"
log("✅ Zero comparison works")

# Test 20: Large number comparisons
result = 1000000 > 999999
assert result == True, f"Expected True, got {result}"
log("✅ Large number comparison works")

# Test 21: List equality comparison
result = [1, 2, 3] == [1, 2, 3]
assert result == True, f"Expected True, got {result}"
log("✅ List equality comparison works")

# Test 22: List inequality comparison
result = [1, 2, 3] != [1, 2, 4]
assert result == True, f"Expected True, got {result}"
log("✅ List inequality comparison works")

# Test 23: Dictionary equality comparison
result = {"a": 1, "b": 2} == {"b": 2, "a": 1}
assert result == True, f"Expected True, got {result}"
log("✅ Dictionary equality comparison works")

# Test 24: Dictionary inequality comparison
result = {"a": 1, "b": 2} != {"a": 1, "b": 3}
assert result == True, f"Expected True, got {result}"
log("✅ Dictionary inequality comparison works")

# Test 25: Complex comparison expressions
result = (5 + 3) > (2 * 3)
assert result == True, f"Expected True, got {result}"
log("✅ Complex comparison expressions work")

# Test 26: Chained comparisons
result = 1 < 2 < 3
assert result == True, f"Expected True, got {result}"
log("✅ Chained comparisons work")

# Test 27: Comparison with variables
x = 10
y = 5
result = x > y
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with variables works")

# Test 28: Comparison with function calls
def get_value():
    return 42

result = get_value() > 40
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with function calls works")

# Test 29: Comparison with list elements
numbers = [1, 2, 3, 4, 5]
result = numbers[2] > numbers[1]
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with list elements works")

# Test 30: Comparison with dictionary values
scores = {"alice": 100, "bob": 80}
result = scores["alice"] > scores["bob"]
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with dictionary values works")

# Test 31: Comparison with attribute access
obj = {"value": 10}
result = obj.value > 5
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with attribute access works")

# Test 32: Comparison with string length
message = "Hello"
result = len(message) > 3
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with string length works")

# Test 33: Comparison with list length
numbers = [1, 2, 3, 4, 5]
result = len(numbers) >= 5
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with list length works")

# Test 34: Comparison with conditional expressions
is_active = True
result = (10 if is_active else 0) > 5
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with conditional expressions works")

# Test 35: Comparison with arithmetic operations
result = (5 * 2 + 3) >= (4 * 3 - 1)
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with arithmetic operations works")

# Test 36: Comparison with scientific notation
result = 1.23e2 > 1.22e2
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with scientific notation works")

# Test 37: Comparison with very small numbers
result = 0.0001 > 0.00001
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with very small numbers works")

# Test 38: Comparison with very large numbers
result = 1e10 > 1e9
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with very large numbers works")

# Test 39: Comparison with empty collections
result = len([]) == 0
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with empty collections works")

# Test 40: Comparison with None and other types
result = None != 0
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with None and other types works")

# Test 41: Comparison with boolean and integer
result = True == 1
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with boolean and integer works")

# Test 42: Comparison with string and number (should fail)
try:
    result = "hello" > 5
    log("⚠️ String > number did not raise error")
except:
    log("✅ String > number handled appropriately")
log("✅ String > number error handling works")

# Test 43: Comparison with list and number (should fail)
try:
    result = [1, 2, 3] < 5
    log("⚠️ List < number did not raise error")
except:
    log("✅ List < number handled appropriately")
log("✅ List < number error handling works")

# Test 44: Multiple comparisons in one expression
x = 5
y = 10
z = 15
result = x < y < z
assert result == True, f"Expected True, got {result}"
log("✅ Multiple comparisons in one expression work")

# Test 45: Comparison with nested expressions
result = ((5 + 3) * 2) > (10 + 5)
assert result == True, f"Expected True, got {result}"
log("✅ Comparison with nested expressions works")

log("Comparison Expressions test completed successfully") 