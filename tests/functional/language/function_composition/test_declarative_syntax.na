# Basic Declarative Function Syntax Test
# Tests the core syntax: def func(...) = expression

log("🧪 Testing Basic Declarative Function Syntax")

# ===== TEST 1: Simple Expression =====
log("\n📝 TEST 1: Simple Expression")

def simple_func(x: int) -> int = x + 1

# This should parse correctly even if execution isn't implemented yet
log("✅ Simple declarative function parsed")

# ===== TEST 2: Pipe Composition =====
log("\n📝 TEST 2: Pipe Composition")

def add_one(x: int) -> int = x + 1
def double(x: int) -> int = x * 2

def pipe_func(x: int) -> int = add_one | double

log("✅ Pipe composition parsed")

# ===== TEST 3: No Return Type =====
log("\n📝 TEST 3: No Return Type")

def no_return_func(x: int) = x * 2

log("✅ Function without return type parsed")

# ===== TEST 4: No Parameters =====
log("\n📝 TEST 4: No Parameters")

def constant_func() -> int = 42

log("✅ Function without parameters parsed")

# ===== TEST 5: Multiple Parameters =====
log("\n📝 TEST 5: Multiple Parameters")

def multi_param_func(x: int, y: str, z: bool = True) -> str = f"{x} {y} {z}"

log("✅ Function with multiple parameters parsed")

# ===== TEST 6: Complex Expression =====
log("\n📝 TEST 6: Complex Expression")

def complex_func(x: int) -> str = f"Value: {x}"

log("✅ Complex expression parsed")

# ===== TEST 7: Function Call =====
log("\n📝 TEST 7: Function Call")

def helper(x: int) -> int = x * 2
def call_func(x: int) -> int = helper(x)

log("✅ Function call expression parsed")

# ===== TEST 8: List Literal =====
log("\n📝 TEST 8: List Literal")

def list_func(x: int) -> list = [x, x * 2, x * 3]

log("✅ List literal parsed")

# ===== TEST 9: String Literal =====
log("\n📝 TEST 9: String Literal")

def string_func() -> str = "Hello, World!"

log("✅ String literal parsed")

# ===== TEST 10: Number Literal =====
log("\n📝 TEST 10: Number Literal")

def number_func() -> int = 123

log("✅ Number literal parsed")

# ===== SUMMARY =====
log("\n🎉 All Basic Syntax Tests Parsed Successfully!")
log("✅ Simple expressions")
log("✅ Pipe compositions")
log("✅ Optional return types")
log("✅ Optional parameters")
log("✅ Multiple parameters with defaults")
log("✅ String literals and f-strings")
log("✅ Function calls")
log("✅ List literals")
log("✅ String literals")
log("✅ Number literals")

log("\n📊 Parser Status:")
log("• All declarative function syntax patterns recognized")
log("• Grammar rules working correctly")
log("• AST nodes generated properly")
log("• 13/13 declarative functions parsed successfully")
log("• Ready for execution engine implementation") 