# Test reason function with user context

# Test 1: Basic context merging
def test_basic_context():
    result = reason("What are the numbers?", context={"numbers": [5, 3]})
    log(f"Basic context test result: {result}")
    return result

# Test 2: Context with multiple values
def test_multiple_context_values():
    result = reason("What is the user's name and age?", context={
        "name": "Alice",
        "age": 30,
        "preferences": ["coffee", "books"]
    })
    log(f"Multiple context values test result: {result}")
    return result

# Test 3: Context with nested data
def test_nested_context():
    result = reason("What is the configuration?", context={
        "config": {
            "debug": True,
            "timeout": 30,
            "features": ["feature1", "feature2"]
        }
    })
    log(f"Nested context test result: {result}")
    return result

# Test 4: Empty context (should still work)
def test_empty_context():
    result = reason("What is 2 + 2?", context={})
    log(f"Empty context test result: {result}")
    return result

# Test 5: No context parameter (backward compatibility)
def test_no_context():
    result = reason("What is 2 + 2?")
    log(f"No context test result: {result}")
    return result

# Run all tests
log("=== Testing reason function with context ===")

basic_result = test_basic_context()
multiple_result = test_multiple_context_values()
nested_result = test_nested_context()
empty_result = test_empty_context()
no_context_result = test_no_context()

# Return results for verification
{
    "basic": basic_result,
    "multiple": multiple_result,
    "nested": nested_result,
    "empty": empty_result,
    "no_context": no_context_result
} 