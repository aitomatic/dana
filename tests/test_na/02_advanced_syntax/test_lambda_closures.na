# Test: Lambda Closures
# Purpose: Test lambda expressions with variable capture and closure behavior
# Category: Advanced Syntax - Lambda Expressions

log("Starting Lambda Closures test")

# Test 1: Basic variable capture
x = 10
capture_lambda = lambda y :: x + y
result = capture_lambda(5)
assert result == 15, f"Expected 15, got {result}"
log("✅ Basic variable capture works")

# Test 2: Variable capture with string
message = "Hello"
greet_lambda = lambda name :: message + ", " + name
result = greet_lambda("World")
assert result == "Hello, World", f"Expected 'Hello, World', got '{result}'"
log("✅ Variable capture with string works")

# Test 3: Variable capture with list
numbers = [1, 2, 3, 4, 5]
filter_lambda = lambda x :: x in numbers
result1 = filter_lambda(3)
result2 = filter_lambda(6)
assert result1 == true, f"Expected true, got {result1}"
assert result2 == false, f"Expected false, got {result2}"
log("✅ Variable capture with list works")

# Test 4: Variable capture with dictionary
config = {"debug": true, "timeout": 30, "retries": 3}
get_config_lambda = lambda key :: config.get(key, None)
result1 = get_config_lambda("debug")
result2 = get_config_lambda("missing")
assert result1 == true, f"Expected true, got {result1}"
assert result2 == None, f"Expected None, got {result2}"
log("✅ Variable capture with dictionary works")

# Test 5: Variable capture with function
def multiplier(factor: int):
    return lambda x :: x * factor

double = multiplier(2)
triple = multiplier(3)
result1 = double(5)
result2 = triple(5)
assert result1 == 10, f"Expected 10, got {result1}"
assert result2 == 15, f"Expected 15, got {result2}"
log("✅ Variable capture with function works")

# Test 6: Variable capture with conditional logic
threshold = 100
check_threshold_lambda = lambda value :: "high" if value > threshold else "low"
result1 = check_threshold_lambda(150)
result2 = check_threshold_lambda(50)
assert result1 == "high", f"Expected 'high', got '{result1}'"
assert result2 == "low", f"Expected 'low', got '{result2}'"
log("✅ Variable capture with conditional logic works")

# Test 7: Variable capture with multiple closures
def create_adder(base: int) -> function:
    return lambda x :: x + base

def create_multiplier(factor: int) -> function:
    return lambda x :: x * factor

def create_composer(f1: function, f2: function) -> function:
    return lambda x :: f2(f1(x))

add_five = create_adder(5)
multiply_by_two = create_multiplier(2)
composed = create_composer(add_five, multiply_by_two)
result = composed(3)
assert result == 16, f"Expected 16, got {result}"
log("✅ Variable capture with multiple closures works")

log("Lambda Closures test completed successfully") 