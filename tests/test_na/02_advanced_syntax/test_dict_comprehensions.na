# Test: Dictionary Comprehensions
# Purpose: Test dictionary comprehensions with various patterns and conditions
# Category: Advanced Syntax - Comprehensions

log("Starting Dictionary Comprehensions test")

# Test 1: Basic dictionary comprehension
numbers = [1, 2, 3, 4, 5]
squares_dict = {(x: x * x) for x in numbers}
expected = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
assert squares_dict == expected, f"Expected {expected}, got {squares_dict}"
log("✅ Basic dictionary comprehension works")

# Test 2: Dictionary comprehension with conditional filtering
even_squares = {(x: x * x) for x in numbers if x % 2 == 0}
expected = {2: 4, 4: 16}
assert even_squares == expected, f"Expected {expected}, got {even_squares}"
log("✅ Dictionary comprehension with conditional filtering works")

# Test 3: Dictionary comprehension with string keys
words = ["hello", "world", "python", "dana"]
length_dict = {(word: len(word)) for word in words}
expected = {"hello": 5, "world": 5, "python": 6, "dana": 4}
assert length_dict == expected, f"Expected {expected}, got {length_dict}"
log("✅ Dictionary comprehension with string keys works")

# Test 4: Dictionary comprehension with string operations
upper_dict = {(word: word.upper()) for word in words}
expected = {"hello": "HELLO", "world": "WORLD", "python": "PYTHON", "dana": "DANA"}
assert upper_dict == expected, f"Expected {expected}, got {upper_dict}"
log("✅ Dictionary comprehension with string operations works")

# Test 5: Dictionary comprehension with range
range_dict = {(i: i * 2) for i in range(5)}
expected = {0: 0, 1: 2, 2: 4, 3: 6, 4: 8}
assert range_dict == expected, f"Expected {expected}, got {range_dict}"
log("✅ Dictionary comprehension with range works")

# # Test 6: Dictionary comprehension with conditional expression - [NOT SUPPORTED YET]
# parity_dict = {(x: "even" if x % 2 == 0 else "odd") for x in numbers}
# expected = {1: "odd", 2: "even", 3: "odd", 4: "even", 5: "odd"}
# assert parity_dict == expected, f"Expected {expected}, got {parity_dict}"
# log("✅ Dictionary comprehension with conditional expression works")

# Test 7: Dictionary comprehension with nested operations
nested_dict = {(x: {(y: x + y) for y in [1, 2]}) for x in [10, 20]}
expected = {10: {1: 11, 2: 12}, 20: {1: 21, 2: 22}}
assert nested_dict == expected, f"Expected {expected}, got {nested_dict}"
log("✅ Dictionary comprehension with nested operations works")

# Test 8: Dictionary comprehension with dictionary items
data = {"a": 1, "b": 2, "c": 3}
swapped_dict = {(value: key) for key, value in data.items()}
expected = {1: "a", 2: "b", 3: "c"}
assert swapped_dict == expected, f"Expected {expected}, got {swapped_dict}"
log("✅ Dictionary comprehension with dictionary items works")

# Test 10: Dictionary comprehension with tuple unpacking
pairs = [(1, "a"), (2, "b"), (3, "c")]
pair_dict = {(x: y) for x, y in pairs}
expected = {1: "a", 2: "b", 3: "c"}
assert pair_dict == expected, f"Expected {expected}, got {pair_dict}"
log("✅ Dictionary comprehension with tuple unpacking works")

# # Test 11: Dictionary comprehension with multiple conditions - [NOT SUPPORTED YET]
# complex_filter = {(x: x * x) for x in range(20) if x % 2 == 0 if x % 3 == 0}
# expected = {0: 0, 6: 36, 12: 144, 18: 324}
# assert complex_filter == expected, f"Expected {expected}, got {complex_filter}"
# log("✅ Dictionary comprehension with multiple conditions works")

# Test 12: Dictionary comprehension with function calls
def square_num(x: int) -> int:
    return x * x

def double_num(x: int) -> int:
    return x * 2

func_dict = {(x: square_num(x)) for x in [1, 2, 3, 4]}
expected = {1: 1, 2: 4, 3: 9, 4: 16}
assert func_dict == expected, f"Expected {expected}, got {func_dict}"
log("✅ Dictionary comprehension with function calls works")

# Test 13: Dictionary comprehension with lambda functions - [NOT SUPPORTED YET]
# lambda_dict = {(x: (lambda y:: y * y)(x)) for x in [1, 2, 3, 4]}
# expected = {1: 1, 2: 4, 3: 9, 4: 16}
# assert lambda_dict == expected, f"Expected {expected}, got {lambda_dict}"
# log("✅ Dictionary comprehension with lambda functions works")

# Test 14: Dictionary comprehension with boolean operations
bool_list = [true, false, true, false, true]
bool_dict = {(i: value) for i, value in enumerate(bool_list) if value}
expected = {0: true, 2: true, 4: true}
assert bool_dict == expected, f"Expected {expected}, got {bool_dict}"
log("✅ Dictionary comprehension with boolean operations works")

# Test 15: Dictionary comprehension with type checking
mixed_data = [1, "hello", 3.14, true, [1, 2, 3]]
type_dict = {(i: type(item)) for i, item in enumerate(mixed_data)}
expected = {0: "int", 1: "str", 2: "float", 3: "bool", 4: "list"}
assert type_dict == expected, f"Expected {expected}, got {type_dict}"
log("✅ Dictionary comprehension with type checking works")

# Test 16: Dictionary comprehension with list operations
nested_lists = [[1, 2], [3, 4], [5, 6]]
sum_dict = {(i: sum(sublist)) for i, sublist in enumerate(nested_lists)}
expected = {0: 3, 1: 7, 2: 11}
assert sum_dict == expected, f"Expected {expected}, got {sum_dict}"
log("✅ Dictionary comprehension with list operations works")

# Test 17: Dictionary comprehension with complex expressions
complex_expr = {(x: x * 2 + 1) for x in range(5) if x % 2 == 0}
expected = {0: 1, 2: 5, 4: 9}
assert complex_expr == expected, f"Expected {expected}, got {complex_expr}"
log("✅ Dictionary comprehension with complex expressions works")

# Test 18: Dictionary comprehension with empty source
empty_source = {(x: x * x) for x in []}
assert empty_source == {}, f"Expected {}, got {empty_source}"
log("✅ Dictionary comprehension with empty source works")

# Test 19: Dictionary comprehension with all elements filtered out
all_filtered = {(x: x * x) for x in [1, 2, 3, 4, 5] if x > 10}
assert all_filtered == {}, f"Expected {}, got {all_filtered}"
log("✅ Dictionary comprehension with all elements filtered out works")

# Test 20: Dictionary comprehension with set operations
set_data = {1, 2, 3, 4, 5}
set_dict = {(x: x * x) for x in set_data}
expected = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
assert set_dict == expected, f"Expected {expected}, got {set_dict}"
log("✅ Dictionary comprehension with set operations works")

# Test 21: Dictionary comprehension with tuple operations
tuple_data = (1, 2, 3, 4, 5)
tuple_dict = {(x: x * 2) for x in tuple_data}
expected = {1: 2, 2: 4, 3: 6, 4: 8, 5: 10}
assert tuple_dict == expected, f"Expected {expected}, got {tuple_dict}"
log("✅ Dictionary comprehension with tuple operations works")

# Test 22: Dictionary comprehension with string formatting
format_dict = {(x: f"Number {x}") for x in [1, 2, 3]}
expected = {1: "Number 1", 2: "Number 2", 3: "Number 3"}
assert format_dict == expected, f"Expected {expected}, got {format_dict}"
log("✅ Dictionary comprehension with string formatting works")

# Test 23: Dictionary comprehension with key transformation
key_transform = {(str(x): x * x) for x in [1, 2, 3, 4]}
expected = {"1": 1, "2": 4, "3": 9, "4": 16}
assert key_transform == expected, f"Expected {expected}, got {key_transform}"
log("✅ Dictionary comprehension with key transformation works")

# Test 24: Dictionary comprehension with value transformation
value_transform = {(x: {"value": x, "squared": x * x}) for x in [1, 2, 3]}
expected = {
    1: {"value": 1, "squared": 1},
    2: {"value": 2, "squared": 4},
    3: {"value": 3, "squared": 9}
}
assert value_transform == expected, f"Expected {expected}, got {value_transform}"
log("✅ Dictionary comprehension with value transformation works")

# Test 25: Dictionary comprehension with mathematical operations
# math_dict = {(x: x ** 2 + y ** 2) for x in range(3) for y in range(3)}
# expected = {0: 0, 1: 2, 2: 8}
# assert math_dict == expected, f"Expected {expected}, got {math_dict}"
# log("✅ Dictionary comprehension with mathematical operations works")

# Test 26: Dictionary comprehension with conditional logic
# conditional_dict = {(x: x if x % 2 == 0 else x * 2) for x in range(6)}
# expected = {0: 0, 1: 2, 2: 2, 3: 6, 4: 4, 5: 10}
# assert conditional_dict == expected, f"Expected {expected}, got {conditional_dict}"
# log("✅ Dictionary comprehension with conditional logic works")

# Test 27: Dictionary comprehension with nested dictionaries
nested_dict_comp = {(x: {(y: x + y) for y in range(3)}) for x in range(3)}
expected = {
    0: {0: 0, 1: 1, 2: 2},
    1: {0: 1, 1: 2, 2: 3},
    2: {0: 2, 1: 3, 2: 4}
}
assert nested_dict_comp == expected, f"Expected {expected}, got {nested_dict_comp}"
log("✅ Dictionary comprehension with nested dictionaries works")

# Test 28: Dictionary comprehension with list values
list_dict = {(x: [x * i for i in range(1, 4)]) for x in [1, 2, 3]}
expected = {1: [1, 2, 3], 2: [2, 4, 6], 3: [3, 6, 9]}
assert list_dict == expected, f"Expected {expected}, got {list_dict}"
log("✅ Dictionary comprehension with list values works")

# Test 29: Dictionary comprehension with tuple values
tuple_dict_comp = {(x: (x, x * x, x * x * x)) for x in [1, 2, 3]}
expected = {1: (1, 1, 1), 2: (2, 4, 8), 3: (3, 9, 27)}
assert tuple_dict_comp == expected, f"Expected {expected}, got {tuple_dict_comp}"
log("✅ Dictionary comprehension with tuple values works")

# # Test 30: Dictionary comprehension with complex filtering
# complex_filter_dict = {(x: x * x) for x in range(50) if x % 2 == 0 if x % 3 == 0 if x % 5 == 0}
# expected = {0: 0, 30: 900}
# assert complex_filter_dict == expected, f"Expected {expected}, got {complex_filter_dict}"
# log("✅ Dictionary comprehension with complex filtering works")

log("Dictionary Comprehensions test completed successfully") 