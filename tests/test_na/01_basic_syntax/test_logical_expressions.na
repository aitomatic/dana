# Test: Logical Expressions
# Purpose: Test logical operators (and, or, not) and expressions
# Category: Basic Syntax - Expressions and Operations

log("Starting Logical Expressions test")

# Test 1: Basic AND operation
result = True and True
assert result == True, f"Expected True, got {result}"
log("✅ Basic AND operation works")

# Test 2: Basic OR operation
result = True or False
assert result == True, f"Expected True, got {result}"
log("✅ Basic OR operation works")

# Test 3: Basic NOT operation
result = not False
assert result == True, f"Expected True, got {result}"
log("✅ Basic NOT operation works")

# Test 4: AND with False
result = True and False
assert result == False, f"Expected False, got {result}"
log("✅ AND with False works")

# Test 5: OR with False
result = False or False
assert result == False, f"Expected False, got {result}"
log("✅ OR with False works")

# Test 6: NOT with True
result = not True
assert result == False, f"Expected False, got {result}"
log("✅ NOT with True works")

# Test 7: Complex AND expression
result = True and True and True
assert result == True, f"Expected True, got {result}"
log("✅ Complex AND expression works")

# Test 8: Complex OR expression
result = False or False or True
assert result == True, f"Expected True, got {result}"
log("✅ Complex OR expression works")

# Test 9: Mixed AND and OR
result = True and (False or True)
assert result == True, f"Expected True, got {result}"
log("✅ Mixed AND and OR works")

# Test 10: NOT with AND
result = not (True and False)
assert result == True, f"Expected True, got {result}"
log("✅ NOT with AND works")

# Test 11: NOT with OR
result = not (False or False)
assert result == True, f"Expected True, got {result}"
log("✅ NOT with OR works")

# Test 12: Double NOT
result = not not True
assert result == True, f"Expected True, got {result}"
log("✅ Double NOT works")

# Test 13: Logical expressions with variables
a = True
b = False
c = True
result = a and (b or c)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with variables work")

# Test 14: Logical expressions with comparison
x = 5
y = 10
result = (x < y) and (y > x)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with comparison work")

# Test 15: Logical expressions with arithmetic
result = (5 + 3 > 7) and (10 - 2 < 9)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with arithmetic work")

# Test 16: Logical expressions with function calls
def is_positive(n):
    return n > 0

def is_even(n):
    return n % 2 == 0

result = is_positive(10) and is_even(10)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with function calls work")

# Test 17: Logical expressions with list operations
numbers = [1, 2, 3, 4, 5]
result = (len(numbers) > 3) and (numbers[0] < numbers[-1])
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with list operations work")

# Test 18: Logical expressions with dictionary operations
scores = {"alice": 100, "bob": 80}
result = ("alice" in scores) and (scores["alice"] > 90)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with dictionary operations work")

# Test 19: Logical expressions with attribute access
obj = {"value": 10, "active": True}
result = obj.active and (obj.value > 5)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with attribute access work")

# Test 20: Logical expressions with string operations
message = "Hello World"
result = (len(message) > 5) and ("World" in message)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with string operations work")

# Test 21: Short-circuit evaluation - AND
def side_effect():
    log("Side effect executed")
    return False

result = False and side_effect()
assert result == False, f"Expected False, got {result}"
log("✅ Short-circuit evaluation for AND works")

# Test 22: Short-circuit evaluation - OR
def side_effect2():
    log("Side effect executed")
    return True

result = True or side_effect2()
assert result == True, f"Expected True, got {result}"
log("✅ Short-circuit evaluation for OR works")

# Test 23: Logical expressions with None
result = (None == None) and (None != 5)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with None work")

# Test 24: Logical expressions with empty collections
result = (len([]) == 0) and (len({}) == 0)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with empty collections work")

# Test 25: Logical expressions with conditional expressions
is_active = True
result = is_active and (10 > 5)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with conditional expressions work")

# Test 26: Complex nested logical expressions
a = True
b = False
c = True
d = False
result = (a and b) or (c and not d)
assert result == True, f"Expected True, got {result}"
log("✅ Complex nested logical expressions work")

# Test 27: Logical expressions with scientific notation
result = (1.23e2 > 1.22e2) and (1.23e2 < 1.24e2)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with scientific notation work")

# Test 28: Logical expressions with very small numbers
result = (0.0001 > 0.00001) and (0.0001 < 0.001)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with very small numbers work")

# Test 29: Logical expressions with very large numbers
result = (1e10 > 1e9) and (1e10 < 1e11)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with very large numbers work")

# Test 30: Logical expressions with zero values
result = (0 == 0.0) and (0 != 1)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with zero values work")

# Test 31: Logical expressions with negative numbers
result = (-5 < 0) and (0 > -5)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with negative numbers work")

# Test 32: Logical expressions with boolean conversion
result = (1 == True) or (0 == False)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with boolean conversion work")

# Test 33: Logical expressions with string comparison
result = ("hello" == "hello") and ("hello" != "world")
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with string comparison work")

# Test 34: Logical expressions with list comparison
result = ([1, 2, 3] == [1, 2, 3]) and ([1, 2, 3] != [1, 2, 4])
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with list comparison work")

# Test 35: Logical expressions with dictionary comparison
result = ({"a": 1} == {"a": 1}) and ({"a": 1} != {"a": 2})
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with dictionary comparison work")

# Test 36: Logical expressions with type checking
result = (type(5) == type(10)) and (type("hello") == type("world"))
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with type checking work")

# Test 37: Logical expressions with membership testing
numbers = [1, 2, 3, 4, 5]
result = (1 in numbers) and (6 not in numbers)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with membership testing work")

# Test 38: Logical expressions with identity testing
a = [1, 2, 3]
b = [1, 2, 3]
c = a
result = (a is c) and (a is not b)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with identity testing work")

# Test 39: Logical expressions with range checking
x = 5
result = (x >= 0) and (x <= 10)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with range checking work")

# Test 40: Logical expressions with multiple conditions
age = 25
income = 50000
employed = True
result = (age >= 18) and (income > 0) and employed
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with multiple conditions work")

# Test 41: Logical expressions with error handling
try:
    result = (5 / 0 > 0) and True
    log("⚠️ Division by zero in logical expression did not raise error")
except:
    log("✅ Division by zero in logical expression handled appropriately")
log("✅ Logical expressions with error handling work")

# Test 42: Logical expressions with undefined variables (should fail)
try:
    result = undefined_var and True
    log("⚠️ Undefined variable in logical expression did not raise error")
except:
    log("✅ Undefined variable in logical expression handled appropriately")
log("✅ Logical expressions with undefined variables error handling work")

# Test 43: Logical expressions with complex nested conditions
def is_valid_user(user):
    return (user.age >= 18) and (user.active) and (len(user.name) > 0)

# Mock user object
user = {"age": 25, "active": True, "name": "John"}
result = is_valid_user(user)
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with complex nested conditions work")

# Test 44: Logical expressions with all False conditions
result = False and False and False
assert result == False, f"Expected False, got {result}"
log("✅ Logical expressions with all False conditions work")

# Test 45: Logical expressions with all True conditions
result = True and True and True
assert result == True, f"Expected True, got {result}"
log("✅ Logical expressions with all True conditions work")

log("Logical Expressions test completed successfully") 