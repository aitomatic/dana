# Test: Control Flow
# Purpose: Test control flow statements (if, elif, else, for, while)
# Category: Basic Syntax - Control Flow

log("Starting Control Flow test")

# Test 1: Basic if statement
x = 10
if x > 5:
    result = True
else:
    result = False
assert result == True, f"Expected True, got {result}"
log("✅ Basic if statement works")

# Test 2: Basic if-else statement
x = 3
if x > 5:
    result = "greater"
else:
    result = "less"
assert result == "less", f"Expected 'less', got {result}"
log("✅ Basic if-else statement works")

# Test 3: If-elif-else statement
x = 0
if x > 0:
    result = "positive"
elif x < 0:
    result = "negative"
else:
    result = "zero"
assert result == "zero", f"Expected 'zero', got {result}"
log("✅ If-elif-else statement works")

# Test 4: Multiple elif statements
x = 75
if x >= 90:
    result = "A"
elif x >= 80:
    result = "B"
elif x >= 70:
    result = "C"
elif x >= 60:
    result = "D"
else:
    result = "F"
assert result == "C", f"Expected 'C', got {result}"
log("✅ Multiple elif statements work")

# Test 5: Nested if statements
x = 10
y = 5
if x > 5:
    if y > 3:
        result = "both"
    else:
        result = "x_only"
else:
    result = "neither"
assert result == "both", f"Expected 'both', got {result}"
log("✅ Nested if statements work")

# Test 6: If statement with complex conditions
x = 10
y = 5
if x > 5 and y < 10:
    result = True
else:
    result = False
assert result == True, f"Expected True, got {result}"
log("✅ If statement with complex conditions works")

# Test 7: If statement with function calls
def is_positive(n):
    return n > 0

def is_even(n):
    return n % 2 == 0

x = 10
if is_positive(x) and is_even(x):
    result = "positive_even"
else:
    result = "other"
assert result == "positive_even", f"Expected 'positive_even', got {result}"
log("✅ If statement with function calls works")

# Test 8: Basic for loop
sum = 0
for i in [1, 2, 3, 4, 5]:
    sum += i
assert sum == 15, f"Expected 15, got {sum}"
log("✅ Basic for loop works")

# Test 9: For loop with range
sum = 0
for i in range(5):
    sum += i
assert sum == 10, f"Expected 10, got {sum}"
log("✅ For loop with range works")

# Test 10: For loop with range(start, stop)
sum = 0
for i in range(2, 8):
    sum += i
assert sum == 27, f"Expected 27, got {sum}"
log("✅ For loop with range(start, stop) works")

# Test 11: For loop with range(start, stop, step)
sum = 0
for i in range(0, 10, 2):
    sum += i
assert sum == 20, f"Expected 20, got {sum}"
log("✅ For loop with range(start, stop, step) works")

# Test 12: For loop with enumerate
result = []
for item in enumerate(["a", "b", "c"]):
    result.append(f"{item[0]}:{item[1]}")
assert result == ["0:a", "1:b", "2:c"], f"Expected ['0:a', '1:b', '2:c'], got {result}"
log("✅ For loop with enumerate works")

# Test 14: For loop with dictionary
scores = {"alice": 100, "bob": 80, "charlie": 90}
result = []
for name in scores:
    result.append(f"{name}")
assert len(result) == 3, f"Expected 3, got {len(result)}"
log("✅ For loop with dictionary works")

# Test 15: For loop with dictionary items
scores = {"alice": 100, "bob": 80, "charlie": 90}
result = []
for score in scores.items():
    result.append(f"{score[0]}:{score[1]}")
assert len(result) == 3, f"Expected 3, got {len(result)}"
log("✅ For loop with dictionary items works")

# Test 16: For loop with dictionary keys
scores = {"alice": 100, "bob": 80, "charlie": 90}
result = []
for name in scores.keys():
    result.append(name)
assert len(result) == 3, f"Expected 3, got {len(result)}"
log("✅ For loop with dictionary keys works")

# Test 17: For loop with dictionary values
scores = {"alice": 100, "bob": 80, "charlie": 90}
result = []
for score in scores.values():
    result.append(score)
assert len(result) == 3, f"Expected 3, got {len(result)}"
log("✅ For loop with dictionary values works")

# Test 18: For loop with string
result = []
for char in "hello":
    result.append(char)
assert result == ["h", "e", "l", "l", "o"], f"Expected ['h', 'e', 'l', 'l', 'o'], got {result}"
log("✅ For loop with string works")

# Test 19: For loop with nested lists
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
sum = 0
for row in matrix:
    for cell in row:
        sum += cell
assert sum == 45, f"Expected 45, got {sum}"
log("✅ For loop with nested lists works")

# Test 20: Basic while loop
i = 0
sum = 0
while i < 5:
    sum += i
    i += 1
assert sum == 10, f"Expected 10, got {sum}"
log("✅ Basic while loop works")

# Test 21: While loop with break
i = 0
sum = 0
while True:
    if i >= 5:
        break
    sum += i
    i += 1
assert sum == 10, f"Expected 10, got {sum}"
log("✅ While loop with break works")

# Test 22: While loop with continue
i = 0
sum = 0
while i < 10:
    i += 1
    if i % 2 == 0:
        continue
    sum += i
assert sum == 25, f"Expected 25, got {sum}"
log("✅ While loop with continue works")

# Test 23: For loop with break
sum = 0
for i in range(10):
    if i >= 5:
        break
    sum += i
assert sum == 10, f"Expected 10, got {sum}"
log("✅ For loop with break works")

# Test 24: For loop with continue
sum = 0
for i in range(10):
    if i % 2 == 0:
        continue
    sum += i
assert sum == 25, f"Expected 25, got {sum}"
log("✅ For loop with continue works")

# Test 25: Nested loops with break
result = []
for i in range(3):
    for j in range(3):
        if i == 1 and j == 1:
            break
        result.append(f"{i}{j}")
assert len(result) == 7, f"Expected 7, got {len(result)}"
log("✅ Nested loops with break work")

# Test 26: Control flow with conditional expressions
x = 10
result = "positive" if x > 0 else "negative"
assert result == "positive", f"Expected 'positive', got {result}"
log("✅ Control flow with conditional expressions works")

# Test 27: Control flow with complex conditions
x = 15
y = 5
if x > 10 and y < 10:
    if x % y == 0:
        result = "divisible"
    else:
        result = "not_divisible"
else:
    result = "invalid"
assert result == "divisible", f"Expected 'divisible', got {result}"
log("✅ Control flow with complex conditions works")

# Test 28: Control flow with function calls in conditions
def is_valid_age(age):
    return age >= 0 and age <= 150

def is_adult(age):
    return age >= 18

age = 25
if is_valid_age(age):
    if is_adult(age):
        result = "adult"
    else:
        result = "minor"
else:
    result = "invalid"
assert result == "adult", f"Expected 'adult', got {result}"
log("✅ Control flow with function calls in conditions works")

# Test 29: Control flow with list comprehensions
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_sum = 0
odd_sum = 0
for num in numbers:
    if num % 2 == 0:
        even_sum += num
    else:
        odd_sum += num
assert even_sum == 30, f"Expected 30, got {even_sum}"
assert odd_sum == 25, f"Expected 25, got {odd_sum}"
log("✅ Control flow with list comprehensions works")

# Test 30: Control flow with error handling
try:
    x = 10
    if x > 5:
        result = x / 0
    else:
        result = "safe"
    log("⚠️ Division by zero did not raise error")
except:
    log("✅ Division by zero in control flow handled appropriately")
log("✅ Control flow with error handling works")

# Test 31: Control flow with empty collections
empty_list = []
result = "empty"
for item in empty_list:
    result = "not_empty"
assert result == "empty", f"Expected 'empty', got {result}"
log("✅ Control flow with empty collections works")

# Test 32: Control flow with None values
x = None
if x is None:
    result = "none"
elif x > 0:
    result = "positive"
else:
    result = "negative"
assert result == "none", f"Expected 'none', got {result}"
log("✅ Control flow with None values works")

# Test 33: Control flow with boolean values
x = True
if x:
    result = "True"
else:
    result = "False"
assert result == "True", f"Expected 'True', got {result}"
log("✅ Control flow with boolean values works")

# Test 34: Control flow with string conditions
message = "hello"
if len(message) > 3:
    if "o" in message:
        result = "long_with_o"
    else:
        result = "long_without_o"
else:
    result = "short"
assert result == "long_with_o", f"Expected 'long_with_o', got {result}"
log("✅ Control flow with string conditions works")

# Test 35: Control flow with dictionary conditions
config = {"debug": True, "timeout": 30}
if config["debug"]:
    if config["timeout"] > 20:
        result = "debug_slow"
    else:
        result = "debug_fast"
else:
    result = "production"
assert result == "debug_slow", f"Expected 'debug_slow', got {result}"
log("✅ Control flow with dictionary conditions works")

# Test 36: Break statement in for loop
sum = 0
for i in range(10):
    if i >= 5:
        break
    sum += i
assert sum == 10, f"Expected 10, got {sum}"
log("✅ Break statement in for loop works")

# Test 37: Continue statement in for loop
sum = 0
for i in range(10):
    if i % 2 == 0:
        continue
    sum += i
assert sum == 25, f"Expected 25, got {sum}"
log("✅ Continue statement in for loop works")

# Test 38: Pass statement
for i in range(5):
    if i < 3:
        pass  # Do nothing
    else:
        break
log("✅ Pass statement works")

# Test 39: Break statement in while loop
i = 0
sum = 0
while True:
    if i >= 5:
        break
    sum += i
    i += 1
assert sum == 10, f"Expected 10, got {sum}"
log("✅ Break statement in while loop works")

# Test 40: Continue statement in while loop
i = 0
sum = 0
while i < 10:
    i += 1
    if i % 2 == 0:
        continue
    sum += i
assert sum == 25, f"Expected 25, got {sum}"
log("✅ Continue statement in while loop works")

# Test 41: Nested control flow - if inside for
result = []
for i in range(5):
    if i % 2 == 0:
        result.append("even")
    else:
        result.append("odd")
assert result == ["even", "odd", "even", "odd", "even"], f"Expected ['even', 'odd', 'even', 'odd', 'even'], got {result}"
log("✅ Nested control flow - if inside for works")

# Test 42: Nested control flow - for inside if
numbers = [1, 2, 3, 4, 5]
sum_even = 0
if len(numbers) > 0:
    for num in numbers:
        if num % 2 == 0:
            sum_even += num
assert sum_even == 6, f"Expected 6, got {sum_even}"
log("✅ Nested control flow - for inside if works")

# Test 43: Nested control flow - while inside if
count = 0
if True:
    while count < 3:
        count += 1
assert count == 3, f"Expected 3, got {count}"
log("✅ Nested control flow - while inside if works")

# Test 44: Nested control flow - if inside while
i = 0
result = []
while i < 5:
    if i < 3:
        result.append("small")
    else:
        result.append("large")
    i += 1
assert result == ["small", "small", "small", "large", "large"], f"Expected ['small', 'small', 'small', 'large', 'large'], got {result}"
log("✅ Nested control flow - if inside while works")

# Test 45: Complex nested control flow
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
sum_diagonal = 0
for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        if i == j:
            sum_diagonal += matrix[i][j]
assert sum_diagonal == 15, f"Expected 15, got {sum_diagonal}"
log("✅ Complex nested control flow works")

log("Control Flow test completed successfully") 