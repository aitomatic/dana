# Test: Scoped Assignments
# Purpose: Test scoped variable assignments with private, public, local, system prefixes
# Category: Basic Syntax - Basic Assignments and Variables

log("Starting Scoped Assignments test")

# Test 1: Private scope assignment
private:x = 42
assert private:x == 42, f"Expected 42, got {private:x}"
log("✅ Private scope assignment works")

# Test 2: Public scope assignment
public:y = "hello"
assert public:y == "hello", f"Expected 'hello', got {public:y}"
log("✅ Public scope assignment works")

# Test 3: Local scope assignment
local:z = 3.14
assert local:z == 3.14, f"Expected 3.14, got {local:z}"
log("✅ Local scope assignment works")

# Test 4: System scope assignment
system:config = true
assert system:config == true, f"Expected true, got {system:config}"
log("✅ System scope assignment works")

# Test 5: Multiple scoped assignments
private:counter = 0
public:name = "Dana"
local:temp = 25.5
system:debug = false

assert private:counter == 0, f"Expected 0, got {private:counter}"
assert public:name == "Dana", f"Expected 'Dana', got {public:name}"
assert local:temp == 25.5, f"Expected 25.5, got {local:temp}"
assert system:debug == false, f"Expected false, got {system:debug}"
log("✅ Multiple scoped assignments work")

# Test 6: Scoped assignment with different data types
private:numbers = [1, 2, 3]
public:settings = {"debug": true, "timeout": 30}
local:status = "active"
system:version = "1.0.0"

assert len(private:numbers) == 3, f"Expected 3, got {len(private:numbers)}"
assert public:settings["debug"] == true, f"Expected true, got {public:settings['debug']}"
assert local:status == "active", f"Expected 'active', got {local:status}"
assert system:version == "1.0.0", f"Expected '1.0.0', got {system:version}"
log("✅ Scoped assignments with complex data types work")

# Test 7: Reassignment in different scopes
private:value = 10
private:value = 20
assert private:value == 20, f"Expected 20, got {private:value}"

public:value = "first"
public:value = "second"
assert public:value == "second", f"Expected 'second', got {public:value}"
log("✅ Scoped variable reassignment works")

# Test 8: Scoped assignment with expressions
private:result = 5 + 3
assert private:result == 8, f"Expected 8, got {private:result}"

public:message = "Hello" + " " + "World"
assert public:message == "Hello World", f"Expected 'Hello World', got {public:message}"
log("✅ Scoped assignment with expressions works")

# Test 9: Scoped assignment with None
private:empty = None
public:null_value = None
assert private:empty == None, f"Expected None, got {private:empty}"
assert public:null_value == None, f"Expected None, got {public:null_value}"
log("✅ Scoped assignment with None works")

# Test 10: Scoped assignment with negative numbers
private:negative = -42
public:negative_float = -3.14
assert private:negative == -42, f"Expected -42, got {private:negative}"
assert public:negative_float == -3.14, f"Expected -3.14, got {public:negative_float}"
log("✅ Scoped assignment with negative numbers works")

log("Scoped Assignments test completed successfully") 