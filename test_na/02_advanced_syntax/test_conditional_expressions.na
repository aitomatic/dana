# Test: Conditional Expressions
# Purpose: Test conditional expressions (ternary operators) in various contexts
# Category: Advanced Syntax - Advanced Expressions

log("Starting Conditional Expressions test")

# Test 1: Basic conditional expression with integers
x = 10
result = x if x > 5 else 0
assert result == 10, f"Expected 10, got {result}"
log("✅ Basic conditional expression with integers works")

# Test 2: Conditional expression with strings
name = "Alice"
result = "Hello " + name if name else "Hello Guest"
assert result == "Hello Alice", f"Expected 'Hello Alice', got '{result}'"
log("✅ Conditional expression with strings works")

# Test 3: Conditional expression with boolean values
is_active = true
status = "Active" if is_active else "Inactive"
assert status == "Active", f"Expected 'Active', got '{status}'"
log("✅ Conditional expression with boolean values works")

# Test 4: Conditional expression with arithmetic operations
value = 15
result = value * 2 if value > 10 else value + 5
assert result == 30, f"Expected 30, got {result}"
log("✅ Conditional expression with arithmetic operations works")

# Test 5: Conditional expression with comparison operators
age = 25
category = "Adult" if age >= 18 else "Minor"
assert category == "Adult", f"Expected 'Adult', got '{category}'"
log("✅ Conditional expression with comparison operators works")

# Test 6: Conditional expression with logical operators
x = 5
y = 10
result = x if x > y and x > 0 else y
assert result == 10, f"Expected 10, got {result}"
log("✅ Conditional expression with logical operators works")

# Test 7: Conditional expression with None values
data = None
result = "No data" if data is None else str(data)
assert result == "No data", f"Expected 'No data', got '{result}'"
log("✅ Conditional expression with None values works")

# Test 8: Conditional expression with list operations
numbers = [1, 2, 3, 4, 5]
result = sum(numbers) if numbers else 0
assert result == 15, f"Expected 15, got {result}"
log("✅ Conditional expression with list operations works")

# Test 9: Conditional expression with dictionary operations
data = {"name": "Alice", "age": 25}
result = data.get("age", 0) if data else 0
assert result == 25, f"Expected 25, got {result}"
log("✅ Conditional expression with dictionary operations works")

# Test 10: Conditional expression with function calls
def is_even(x: int) -> bool:
    return x % 2 == 0

def double(x: int) -> int:
    return x * 2

def triple(x: int) -> int:
    return x * 3

value = 6
result = double(value) if is_even(value) else triple(value)
assert result == 12, f"Expected 12, got {result}"
log("✅ Conditional expression with function calls works")

# # Test 11: Conditional expression with lambda functions - [NOT SUPPORTED YET]
# value = 7
# result = (lambda x :: x * 2)(value) if value % 2 == 0 else (lambda x :: x * 3)(value)
# assert result == 21, f"Expected 21, got {result}"
# log("✅ Conditional expression with lambda functions works")

# Test 12: Conditional expression with string methods
text = "hello"
result = text.upper() if len(text) > 3 else text.lower()
assert result == "HELLO", f"Expected 'HELLO', got '{result}'"
log("✅ Conditional expression with string methods works")

# Test 13: Conditional expression with type checking
data = 42
result = "Integer" if type(data) == 'int' else "Not integer"
assert result == "Integer", f"Expected 'Integer', got '{result}'"
log("✅ Conditional expression with type checking works")

# Test 14: Conditional expression with complex conditions
x = 15
y = 20
z = 10
result = x if x > y and x > z else (y if y > z else z)
assert result == 20, f"Expected 20, got {result}"
log("✅ Conditional expression with complex conditions works")

# Test 15: Conditional expression with nested operations
value = 8
result = (value * 2 + 1) if value % 2 == 0 else (value * 3 - 1)
assert result == 17, f"Expected 17, got {result}"
log("✅ Conditional expression with nested operations works")

# Test 16: Conditional expression with list comprehension
numbers = [1, 2, 3, 4, 5, 6]
result = [x * 2 for x in numbers] if len(numbers) > 3 else [x + 1 for x in numbers]
assert result == [2, 4, 6, 8, 10, 12], f"Expected [2, 4, 6, 8, 10, 12], got {result}"
log("✅ Conditional expression with list comprehension works")

# Test 17: Conditional expression with set operations
data = {1, 2, 3, 4, 5}
result = {x * 2 for x in data} if len(data) > 3 else {x + 1 for x in data}
assert result == {2, 4, 6, 8, 10}, f"Expected {2, 4, 6, 8, 10}, got {result}"
log("✅ Conditional expression with set operations works")

# Test 18: Conditional expression with dictionary comprehension
data = {"a": 1, "b": 2, "c": 3}
result = {(k: v * 2) for k, v in data.items()} if len(data) > 2 else {(k: v + 1) for k, v in data.items()}
expected = {"a": 2, "b": 4, "c": 6}
assert result == expected, f"Expected {expected}, got {result}"
log("✅ Conditional expression with dictionary comprehension works")

# Test 19: Conditional expression with tuple operations
point = (3, 4)
result = (point[0] * 2, point[1] * 2) if point[0] > 0 and point[1] > 0 else (0, 0)
assert result == (6, 8), f"Expected (6, 8), got {result}"
log("✅ Conditional expression with tuple operations works")

# Test 20: Conditional expression with attribute access
struct Person:
    name: str
    age: int

person = Person(name="Alice", age=25)
result = person.name if person.age >= 18 else "Minor"
assert result == "Alice", f"Expected 'Alice', got '{result}'"
log("✅ Conditional expression with attribute access works")

# Test 21: Conditional expression with method calls
text = "hello world"
result = text.split() if " " in text else [text]
assert result == ["hello", "world"], f"Expected ['hello', 'world'], got {result}"
log("✅ Conditional expression with method calls works")

# Test 22: Conditional expression with error handling
def safe_divide(a: int, b: int) -> float:
    return a / b if b != 0 else 0

result = safe_divide(10, 2)
assert result == 5.0, f"Expected 5.0, got {result}"
log("✅ Conditional expression with error handling works")

# Test 23: Conditional expression with multiple conditions
value = 15
result = "high" if value > 20 else ("medium" if value > 10 else "low")
assert result == "medium", f"Expected 'medium', got '{result}'"
log("✅ Conditional expression with multiple conditions works")

# Test 24: Conditional expression with boolean logic
x = true
y = false
result = "both true" if x and y else ("x true" if x else ("y true" if y else "both false"))
assert result == "x true", f"Expected 'x true', got '{result}'"
log("✅ Conditional expression with boolean logic works")

# Test 25: Conditional expression with string formatting
name = "Alice"
age = 25
result = f"{name} is {age} years old" if name and age > 0 else "Invalid data"
assert result == "Alice is 25 years old", f"Expected 'Alice is 25 years old', got '{result}'"
log("✅ Conditional expression with string formatting works")

# Test 27: Conditional expression with list indexing
numbers = [1, 2, 3, 4, 5]
index = 3
result = numbers[index] if 0 <= index < len(numbers) else -1
assert result == 4, f"Expected 4, got {result}"
log("✅ Conditional expression with list indexing works")

# Test 28: Conditional expression with dictionary access
data = {"name": "Alice", "age": 25}
key = "age"
result = data[key] if key in data else None
assert result == 25, f"Expected 25, got {result}"
log("✅ Conditional expression with dictionary access works")

# Test 29: Conditional expression with complex data structures
nested_data = {"users": [{"name": "Alice", "active": true}, {"name": "Bob", "active": false}]}
result = [user for user in nested_data["users"] if user["active"]] if "users" in nested_data else []
assert result == [{"name": "Alice", "active": true}], f"Expected [{'name': 'Alice', 'active': true}], got {result}"
log("✅ Conditional expression with complex data structures works")

# Test 30: Conditional expression with pipeline operations - [NOT SUPPORTED YET]
# def add_ten(x: int) -> int:
#     return x + 10

# def double(x: int) -> int:
#     return x * 2

# value = 5
# result = (value | add_ten) if value > 0 else (value | double)
# assert result == 15, f"Expected 15, got {result}"
# log("✅ Conditional expression with pipeline operations works")

# log("Conditional Expressions test completed successfully") 