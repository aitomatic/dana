# Test: List Comprehensions
# Purpose: Test list comprehensions with various patterns and conditions
# Category: Advanced Syntax - Comprehensions

log("Starting List Comprehensions test")

# Test 1: Basic list comprehension
numbers = [1, 2, 3, 4, 5]
squares = [x * x for x in numbers]
assert squares == [1, 4, 9, 16, 25], f"Expected [1, 4, 9, 16, 25], got {squares}"
log("✅ Basic list comprehension works")

# Test 2: List comprehension with conditional filtering
even_squares = [x * x for x in numbers if x % 2 == 0]
assert even_squares == [4, 16], f"Expected [4, 16], got {even_squares}"
log("✅ List comprehension with conditional filtering works")

# Test 3: List comprehension with string operations
words = ["hello", "world", "python", "dana"]
upper_words = [word.upper() for word in words]
assert upper_words == ["HELLO", "WORLD", "PYTHON", "DANA"], f"Expected ['HELLO', 'WORLD', 'PYTHON', 'DANA'], got {upper_words}"
log("✅ List comprehension with string operations works")

# Test 4: List comprehension with range
range_squares = [i * i for i in range(1, 6)]
assert range_squares == [1, 4, 9, 16, 25], f"Expected [1, 4, 9, 16, 25], got {range_squares}"
log("✅ List comprehension with range works")

# Test 5: List comprehension with dictionary operations
data = {"a": 1, "b": 2, "c": 3}
keys = [key for key in data.keys()]
values = [value for value in data.values()]
assert keys == ["a", "b", "c"], f"Expected ['a', 'b', 'c'], got {keys}"
assert values == [1, 2, 3], f"Expected [1, 2, 3], got {values}"
log("✅ List comprehension with dictionary operations works")

# Test 6: List comprehension with string characters
text = "hello"
chars = [char for char in text]
assert chars == ["h", "e", "l", "l", "o"], f"Expected ['h', 'e', 'l', 'l', 'o'], got {chars}"
log("✅ List comprehension with string characters works")

# Test 7: List comprehension with tuple unpacking
pairs = [(1, "a"), (2, "b"), (3, "c")]
first_elements = [x for x, y in pairs]
assert first_elements == [1, 2, 3], f"Expected [1, 2, 3], got {first_elements}"
log("✅ List comprehension with tuple unpacking works")

# Test 8: List comprehension with function calls
def square(x: int) -> int:
    return x * x

squared_values = [square(x) for x in [1, 2, 3, 4]]
assert squared_values == [1, 4, 9, 16], f"Expected [1, 4, 9, 16], got {squared_values}"
log("✅ List comprehension with function calls works")

# Test 9: List comprehension with boolean operations
bool_list = [true, false, true, false, true]
true_count = [x for x in bool_list if x]
assert len(true_count) == 3, f"Expected 3, got {len(true_count)}"
log("✅ List comprehension with boolean operations works")

# Test 10: List comprehension with type checking
mixed_data = [1, "hello", 3.14, true, [1, 2, 3]]
int_values = [x for x in mixed_data if type(x) == 'int']
assert int_values == [1], f"Expected [1], got {int_values}"
log("✅ List comprehension with type checking works")

log("List Comprehensions test completed successfully") 