# Test: Conditional Pipeline Operations
# Purpose: Test pipeline operations with case() function for conditional logic
# Category: Advanced Syntax - Pipeline Operations with Conditionals

log("Starting Conditional Pipeline Operations test")

# Test 1: Simple conditional pipeline
def handle_success():
    return "Operation completed successfully"

def handle_failure():
    return "Operation failed"

def process_result(success):
    return case(
        (success == true, handle_success),
        handle_failure
    )

def pipeline(success) = process_result
result1 = pipeline(true)
result2 = pipeline(false)

assert result1 == "Operation completed successfully", f"Expected success message, got {result1}"
assert result2 == "Operation failed", f"Expected failure message, got {result2}"
log("✅ Simple conditional pipeline works")

# Test 2: Pipeline with number classification
def classify_number(num):
    return case(
        (num < 0, lambda :: "Negative"),
        (num == 0, lambda :: "Zero"),
        (num <= 10, lambda :: "Small"),
        lambda :: "Large"
    )

def add_prefix(classification):
    return f"Number is {classification}"

def pipeline(num) = classify_number | add_prefix
result1 = pipeline(-5)
result2 = pipeline(0)
result3 = pipeline(7)
result4 = pipeline(50)

assert result1 == "Number is Negative", f"Expected 'Number is Negative', got {result1}"
assert result2 == "Number is Zero", f"Expected 'Number is Zero', got {result2}"
assert result3 == "Number is Small", f"Expected 'Number is Small', got {result3}"
assert result4 == "Number is Large", f"Expected 'Number is Large', got {result4}"
log("✅ Pipeline with number classification works")

# # Test 3: Pipeline with case() in pipeline - [NOT SUPPORTED YET]
# def pipeline(num) = case(
#     (num < 0, lambda :: "Negative"),
#     (num == 0, lambda :: "Zero"),
#     (num <= 10, lambda :: "Small"),
#     lambda :: "Large"
# ) | add_prefix

# result1 = pipeline(-5)
# assert result1 == "Number is Negative", f"Expected 'Number is Negative', got {result1}"


log("Conditional Pipeline Operations test completed successfully")
