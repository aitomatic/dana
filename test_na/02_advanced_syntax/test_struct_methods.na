# Test: Struct Methods
# Purpose: Test struct method definitions and usage with various types
# Category: Advanced Syntax - Struct Methods

log("Starting Struct Methods test")

# Test 1: Basic Point struct with methods
struct Point:
    x: int
    y: int

def (point: Point) translate(dx: int, dy: int) -> Point:
    return Point(x=point.x + dx, y=point.y + dy)

def (point: Point) distance_from_origin() -> float:
    return (point.x ** 2 + point.y ** 2) ** 0.5

point = Point(x=3, y=4)
moved = point.translate(2, 1)
distance = point.distance_from_origin()

assert moved.x == 5, f"Expected x=5, got {moved.x}"
assert moved.y == 5, f"Expected y=5, got {moved.y}"
assert distance == 5.0, f"Expected distance=5.0, got {distance}"
log("✅ Basic Point struct methods work")

# Test 2: Union methods with multiple shapes
struct Circle:
    radius: float
    center: Point

struct Rectangle:
    width: float
    height: float

def (shape: Point | Circle | Rectangle) area() -> float:
    shape_type = shape._type.name
    if shape_type == "Point":
        return 0.0
    elif shape_type == "Circle":
        return 3.14159 * shape.radius * shape.radius
    elif shape_type == "Rectangle":
        return shape.width * shape.height

point = Point(x=3, y=4)
circle = Circle(radius=5.0, center=Point(x=0, y=0))
rectangle = Rectangle(width=4.0, height=3.0)

point_area = point.area()
circle_area = circle.area()
rectangle_area = rectangle.area()

assert point_area == 0.0, f"Expected point area=0.0, got {point_area}"
assert abs(circle_area - 78.53975) < 0.0001, f"Expected circle area≈78.53975, got {circle_area}"
assert rectangle_area == 12.0, f"Expected rectangle area=12.0, got {rectangle_area}"
log("✅ Union methods with multiple shapes work")

# Test 3: Methods with default parameters
def (point: Point) shift(dx: int = 0, dy: int = 0) -> Point:
    return Point(x=point.x + dx, y=point.y + dy)

point = Point(x=1, y=2)
shifted_default = point.shift()
shifted_x = point.shift(dx=3)
shifted_y = point.shift(dy=4)
shifted_both = point.shift(dx=5, dy=6)

assert shifted_default.x == 1 and shifted_default.y == 2, "Default shift failed"
assert shifted_x.x == 4 and shifted_x.y == 2, "Shift with dx only failed"
assert shifted_y.x == 1 and shifted_y.y == 6, "Shift with dy only failed"
assert shifted_both.x == 6 and shifted_both.y == 8, "Shift with both parameters failed"
log("✅ Methods with default parameters work")


# Test 6: Immutable operations
def (point: Point) scale(factor: float) -> Point:
    return Point(x=int(point.x * factor), y=int(point.y * factor))

original = Point(x=3, y=4)
scaled = original.scale(2.0)

assert original.x == 3 and original.y == 4, "Original point was modified"
assert scaled.x == 6 and scaled.y == 8, "Scaling calculation failed"
log("✅ Immutable operations work")

log("Struct Methods test completed successfully")
