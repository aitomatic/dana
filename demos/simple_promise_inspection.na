# Simple Promise Inspection Demo

# Track execution timing
execution_tracker = [0]

def expensive_operation():
    execution_tracker[0] = execution_tracker[0] + 1
    print(f"üîÑ Executing expensive operation #{execution_tracker[0]}...")
    # Simulate expensive computation
    result = 0
    for i in range(100000):
        result = result + i
    print(f"‚úÖ Expensive operation #{execution_tracker[0]} completed!")
    return f"result_{execution_tracker[0]}_{result}"

# Lazy function - returns Promise[T]
def lazy_function():
    print("üìù Creating lazy function reference...")
    return expensive_operation()

# Eager function - executes immediately
def eager_function():
    print("‚ö° Creating eager function reference...")
    deliver expensive_operation()

print("=== SIMPLE PROMISE INSPECTION ===")

print("\n1. LAZY RESULT INSPECTION")
print("Creating lazy function...")
execution_tracker[0] = 0
lazy_result = lazy_function()
print(f"Function returned! Execution count: {execution_tracker[0]}")
print(f"Result type: {type(lazy_result)}")
print(f"Result value: {lazy_result}")

print("\n2. EAGER RESULT INSPECTION")
print("Creating eager function...")
execution_tracker[0] = 0
eager_result = eager_function()
print(f"Function executed! Execution count: {execution_tracker[0]}")
print(f"Result type: {type(eager_result)}")
print(f"Result value: {eager_result}")

print("\n3. COMPARISON")
print("Lazy result is Promise:", "Promise" in str(type(lazy_result)))
print("Eager result is Promise:", "Promise" in str(type(eager_result)))
print("Lazy execution count:", execution_tracker[0])
print("Eager execution count:", execution_tracker[0])

print("\n=== INSIGHTS ===")
print("‚Ä¢ Lazy creates Promise[T] object")
print("‚Ä¢ Eager creates concrete value")
print("‚Ä¢ Promise transparency needs refinement")
print("‚Ä¢ True lazy evaluation is working") 