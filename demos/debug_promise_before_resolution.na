# Debug Promise Before Resolution
print("=== DEBUG PROMISE BEFORE RESOLUTION ===")

def lazy_five():
    print("lazy_five() called - START")
    print("About to execute return 5")
    result = 5
    print(f"Return value: {result}")
    return result

def eager_five():
    print("eager_five() called - START")
    print("About to execute deliver 5")
    deliver 5

print("1. Testing return (should create Promise)...")
print("Calling lazy_five()...")
lazy_result = lazy_five()

# Immediately check the type before any other operations
print(f"lazy_result type immediately after function call: {type(lazy_result)}")
print(f"lazy_result value immediately after function call: {lazy_result}")

# Check if it's a Promise using the __class__ attribute
print(f"lazy_result.__class__ immediately after function call: {lazy_result.__class__}")

# Try to access the Promise object directly
print(f"lazy_result object identity: {id(lazy_result)}")

print("\n2. Testing deliver (should create concrete value)...")
print("Calling eager_five()...")
eager_result = eager_five()
print(f"eager_result type: {type(eager_result)}")
print(f"eager_result value: {eager_result}")
print(f"eager_result.__class__: {eager_result.__class__}")

print("=== DEBUG COMPLETE ===") 