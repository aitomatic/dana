# Simple Return vs Deliver Test

# Lazy function - returns Promise[T] immediately
def expensive_lazy_operation() -> str:
    print("ðŸš€ Starting expensive lazy operation...")
    # Simulate expensive work
    result = 0
    for i in range(100000):
        result = result + i
    print("âœ… Expensive lazy operation completed!")
    return f"lazy_result_{result}"

# Eager function - executes immediately
def quick_eager_operation() -> str:
    print("âš¡ Starting quick eager operation...")
    # Simulate quick work
    result = 0
    for i in range(1000):
        result = result + i
    print("âœ… Quick eager operation completed!")
    deliver f"eager_result_{result}"

# Test the difference
print("=== RETURN vs DELIVER DEMO ===")

print("\n1. Lazy Operation (return)")
print("Creating reference...")
lazy_result = expensive_lazy_operation()  # Returns immediately
print("Reference created! (no expensive work done yet)")
print("Now accessing result...")
actual_result = lazy_result  # NOW the expensive work happens
print(f"Result: {actual_result}")

print("\n2. Eager Operation (deliver)")
print("Creating and executing...")
eager_result = quick_eager_operation()  # Executes immediately
print("Result ready! (work already done)")
print("Accessing result...")
actual_result = eager_result  # Instant access
print(f"Result: {actual_result}")

print("\n=== KEY DIFFERENCE ===")
print("â€¢ return: Fast creation, deferred execution")
print("â€¢ deliver: Immediate execution, instant access")
print("â€¢ Use return for expensive operations that might not be needed")
print("â€¢ Use deliver for quick operations that are always needed") 