# Simple Return vs Deliver Demo - Dana Syntax

# Track execution timing
execution_tracker = [0]

def expensive_operation():
    execution_tracker[0] = execution_tracker[0] + 1
    print(f"üîÑ Executing expensive operation #{execution_tracker[0]}...")
    # Simulate expensive computation
    result = 0
    for i in range(100000):
        result = result + i
    print(f"‚úÖ Expensive operation #{execution_tracker[0]} completed!")
    return f"result_{execution_tracker[0]}_{result}"

# Lazy function - returns Promise[T] 
def lazy_function():
    print("üìù Creating lazy function reference...")
    return expensive_operation()

# Eager function - executes immediately
def eager_function():
    print("‚ö° Creating eager function reference...")
    deliver expensive_operation()

print("=== SIMPLE RETURN vs DELIVER DEMO ===")

print("\n1. LAZY EXECUTION (return)")
print("Creating lazy function...")
execution_tracker[0] = 0
lazy_result = lazy_function()
print(f"Function returned! Execution count: {execution_tracker[0]}")
print(f"Result type: {type(lazy_result)}")
print("Lazy result created!")

print("\n2. EAGER EXECUTION (deliver)")
print("Creating eager function...")
execution_tracker[0] = 0
eager_result = eager_function()
print(f"Function executed! Execution count: {execution_tracker[0]}")
print(f"Result type: {type(eager_result)}")
print("Eager result created!")

print("\n3. MULTIPLE OPERATIONS")
print("Creating multiple operations...")
execution_tracker[0] = 0

def lazy_a():
    return expensive_operation()

def lazy_b():
    return expensive_operation()

def lazy_c():
    return expensive_operation()

# Create three operations
a = lazy_a()
b = lazy_b()
c = lazy_c()

print(f"Created 3 operations! Execution count: {execution_tracker[0]}")

print("\n4. CONDITIONAL EXECUTION")
print("Creating conditional operations...")
execution_tracker[0] = 0

def conditional_lazy(should_execute):
    if should_execute:
        return expensive_operation()
    else:
        return "skipped"

# Create conditional operations
needed_result = conditional_lazy(true)
unneeded_result = conditional_lazy(false)

print(f"Created conditional operations! Execution count: {execution_tracker[0]}")

print("\n=== KEY DIFFERENCES ===")
print("‚Ä¢ return: Creates Promise[T] for lazy evaluation")
print("‚Ä¢ deliver: Executes immediately and returns concrete value")
print("‚Ä¢ Both provide transparent typing - Promise[T] appears as T")
print("‚Ä¢ Multiple operations can be parallelized when accessed together")
print("‚Ä¢ Conditional operations only execute if accessed")

print("\n=== REAL-WORLD BENEFITS ===")
print("üöÄ Faster startup times with lazy loading")
print("üîÑ Automatic parallelization of multiple operations")
print("üíæ Reduced memory usage by avoiding unnecessary loading")
print("üéØ Conditional execution based on runtime decisions")
print("üîß Natural developer experience with transparent typing") 