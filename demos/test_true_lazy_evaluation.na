# Test True Lazy Evaluation
print("=== TEST TRUE LAZY EVALUATION ===")

# Use a list to track execution count (since global is not supported)
execution_tracker = [0]

def expensive_operation():
    execution_tracker[0] = execution_tracker[0] + 1
    print(f"üöÄ Expensive operation executed! (count: {execution_tracker[0]})")
    # Simulate expensive computation
    result = 0
    for i in range(1000):
        result = result + i
    return f"expensive_result_{result}"

def lazy_function():
    print("üìù Creating lazy function reference...")
    return expensive_operation()

def eager_function():
    print("‚ö° Creating eager function reference...")
    deliver expensive_operation()

print("1. Creating lazy reference (should NOT execute)...")
lazy_result = lazy_function()
print(f"Lazy result type: {type(lazy_result)}")
print(f"Execution count after creation: {execution_tracker[0]}")

print("\n2. Creating eager reference (should execute immediately)...")
eager_result = eager_function()
print(f"Eager result type: {type(eager_result)}")
print(f"Execution count after eager creation: {execution_tracker[0]}")

print("\n3. Accessing lazy result (should execute now)...")
lazy_value = lazy_result
print(f"Lazy value: {lazy_value}")
print(f"Execution count after lazy access: {execution_tracker[0]}")

print("\n4. Testing arithmetic with lazy result...")
lazy_math = lazy_result + "_modified"
print(f"Lazy math result: {lazy_math}")
print(f"Execution count after arithmetic: {execution_tracker[0]}")

print("=== TEST COMPLETE ===") 