# Test new resource implementation

# Base resource
resource BaseResource:
    name: str = "default"
    kind: str = "base"
    state: str = "created"
    
def (self: BaseResource) initialize() -> bool:
    self.state = "initialized"
    print(f"Initialized {self.name}")
    return true
    
def (self: BaseResource) cleanup() -> bool:
    self.state = "cleaned"
    print(f"Cleaned up {self.name}")
    return true

# Inherit from BaseResource
resource DatabaseConnection(BaseResource):
    host: str = "localhost"
    port: int = 5432
    database: str = "default"
    
def (self: DatabaseConnection) connect() -> bool:
    print(f"Connecting to {self.host}:{self.port}/{self.database}")
    return true
    
def (self: DatabaseConnection) initialize() -> bool:
    # Call parent method
    super().initialize()
    # Add custom initialization
    return self.connect()

# Test resource creation and inheritance
print("Creating base resource...")
base = BaseResource(name="test_base")
print(f"Base resource state: {base.state}")

print("\nCreating database connection...")
db = DatabaseConnection(
    name="test_db",
    host="prod-server",
    port=5433,
    database="production"
)
print(f"Database resource state: {db.state}")

print("\nTesting method inheritance...")
db.cleanup()  # Should call BaseResource.cleanup()
print(f"After cleanup: {db.state}")

print("\nResource test completed successfully!")
