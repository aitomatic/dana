
# Flag to control memory usage
USE_MEMORY = True

st_memory = None
if USE_MEMORY:
    st_memory = use("memory")

agent TravelPlannerAgent:
    name : str = "Travel Planning Memory Agent"
    description : str = "An agent that helps plan trips while tracking multiple aspects like flights, hotels, and activities"
    session_id : str = "travel_planner_demo"
    resources : list = [st_memory]

def get_messages(memory_agent: TravelPlannerAgent) -> str:
    if not USE_MEMORY or not memory_agent.resources:
        return "Memory is disabled"
    
    memory_resource = memory_agent.resources[0]
    result = memory_resource.retrieve_context(query="")
    return result

def show_memory_status(memory_agent: TravelPlannerAgent, step: str):
    print(f"\n📊 Memory Status {step}:")
    print("-" * 50)
    
    if not USE_MEMORY:
        print("Memory is DISABLED")
        print("-" * 50)
        return
    
    if not memory_agent.resources:
        print("No memory resource available")
        print("-" * 50)
        return
    
    memory_resource = memory_agent.resources[0]
    interaction_count = len(memory_resource.retrieve_context(query=""))
    print(f"Total interactions stored: {interaction_count}")
    
    # Show recent conversation context
    if interaction_count > 0:
        conversation_history = get_messages(memory_agent)
        print("Recent conversation context:")
        print(conversation_history)
    print("-" * 50)

# Create agent instance
travel_agent = TravelPlannerAgent(session_id="travel_planning_conversation")

print("\n" + "="*80)
print("✈️  DANA Travel Planning Conversation Demo".center(80))
print("="*80 + "\n")

print(f"Memory Status: {USE_MEMORY}")
print("This demo shows how the agent maintains context when users")
print("switch between different aspects of planning a trip.\n")

# === TOPIC A: Flight Booking ===
print("✈️ === TOPIC A: Flight Booking ===")
print("-"*80)

print("\n📝 Message 1 (Topic A - Flights):")
user1 = "I want to plan a trip to Paris for next month"
print(f"User: {user1}")
response1 = travel_agent.solve(user1)
print(f"🤖 Agent: {response1}")

show_memory_status(travel_agent, "after Topic A introduction")

print("\n📝 Message 2 (Topic A - Flight Details):")
user2 = "I'd prefer direct flights and I'm flexible with dates in the first two weeks"
print(f"User: {user2}")
response2 = travel_agent.solve(user2)
print(f"🤖 Agent: {response2}")

# === TOPIC B: Hotel Planning ===
print("\n\n🏨 === TOPIC B: Hotel Planning ===")
print("-"*80)

print("\n📝 Message 3 (Topic B - Hotels):")
user3 = "I also need help finding a hotel in the city center"
print(f"User: {user3}")
response3 = travel_agent.solve(user3)
print(f"🤖 Agent: {response3}")

show_memory_status(travel_agent, "after Topic B introduction")

print("\n📝 Message 4 (Topic B - Hotel Details):")
user4 = "I'd like a 4-star hotel with a view of the Eiffel Tower"
print(f"User: {user4}")
response4 = travel_agent.solve(user4)
print(f"🤖 Agent: {response4}")

# === BACK TO TOPIC A: Flights ===
print("\n\n🔙 === BACK TO TOPIC A: Flight Booking ===")
print("-"*80)

print("\n📝 Message 5 (Back to Topic A - Flights):")
user5 = "About the flights, what airlines have morning departures?"
print(f"User: {user5}")
response5 = travel_agent.solve(user5)
print(f"🤖 Agent: {response5}")

show_memory_status(travel_agent, "after returning to Topic A")

# === TOPIC A CONTINUATION ===
print("\n📝 Message 6 (Topic A - Specific Details):")
user6 = "Can you check if there are any business class seats available on those morning flights?"
print(f"User: {user6}")
response6 = travel_agent.solve(user6)
print(f"🤖 Agent: {response6}")

# === BACK TO TOPIC B: Hotels ===
print("\n\n🔙 === BACK TO TOPIC B: Hotel Planning ===")
print("-"*80)

print("\n📝 Message 7 (Back to Topic B - Hotels):")
user7 = "For the hotel, what dining options are available nearby?"
print(f"User: {user7}")
response7 = travel_agent.solve(user7)
print(f"🤖 Agent: {response7}")

show_memory_status(travel_agent, "after returning to Topic B")

# === MIXED CONTEXT TEST ===
print("\n\n🔀 === MIXED CONTEXT TEST ===")
print("-"*80)

print("\n📝 Message 8 (Mixed Context):")
user8 = "Can you summarize our flight and hotel plans for Paris?"
print(f"User: {user8}")
response8 = travel_agent.solve(user8)
print(f"🤖 Agent: {response8}")

print("\n" + "="*80)
print("✨  Travel Planning Demo Completed Successfully!".center(80))
if USE_MEMORY:
    print("🧭  The agent successfully tracked multiple travel planning threads!".center(80))
    print("🔀  Context switching between topics was handled seamlessly!".center(80))
else:
    print("🧭  The agent operated without memory tracking!".center(80))
    print("🔀  Each response was independent without context retention!".center(80))
print("="*80 + "\n")