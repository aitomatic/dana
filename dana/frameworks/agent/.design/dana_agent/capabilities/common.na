def extract_domain(user_request: str) -> str:
    """
    Extract the primary domain from a user request.
    
    Args:
        user_request: The user's request string
        
    Returns:
        The identified domain (e.g., "semiconductor_manufacturing", "medical_diagnosis")
    """
    pass

@poet
def identify_tasks(user_request: str) -> list[str]:
    """
    Identify specific tasks from a user request.
    
    Args:
        user_request: The user's request string
        
    Returns:
        List of identified tasks (e.g., ["defect_classification", "troubleshooting"])
    """
    pass

def extract_constraints(user_request: str) -> dict:
    """
    Extract constraints and requirements from a user request.
    
    Args:
        user_request: The user's request string
        
    Returns:
        Dictionary of constraints (e.g., {"accuracy": 0.95, "latency": "real_time"})
    """
    pass

@poet
def derive_capabilities_from_tasks(tasks: list[str]) -> list[str]:
    """
    Derive required capabilities from identified tasks.
    
    Args:
        tasks: List of tasks the agent needs to perform
        
    Returns:
        List of required capabilities (e.g., ["image_analysis", "pattern_recognition"])
    """
    pass

def map_knowledge_sources(knowledge_plan: dict) -> list[str]:
    """
    Map knowledge requirements to specific knowledge sources.
    
    Args:
        knowledge_plan: Plan containing knowledge requirements
        
    Returns:
        List of required knowledge sources (e.g., ["equipment_specs", "historical_data"])
    """
    pass

def scan_available_knowledge(domain: str) -> list[str]:
    """
    Scan for available knowledge sources in a given domain.
    
    Args:
        domain: The domain to scan for knowledge
        
    Returns:
        List of available knowledge sources in the domain
    """
    pass

@poet
def identify_knowledge_gaps(requirements: dict, existing_knowledge: list[str]) -> dict:
    """
    Identify gaps between required and existing knowledge.
    
    Args:
        requirements: Knowledge requirements dictionary
        existing_knowledge: List of available knowledge sources
        
    Returns:
        Dictionary of knowledge gaps and synthesis needs
    """
    pass

def gather_knowledge(required_sources: list[str]) -> dict:
    """
    Gather knowledge from required sources.
    
    Args:
        required_sources: List of knowledge sources to gather from
        
    Returns:
        Dictionary of gathered knowledge organized by source
    """
    pass

@poet
def organize_knowledge(raw_knowledge: dict, tasks: list[str]) -> dict:
    """
    Organize raw knowledge for optimal task performance.
    
    Args:
        raw_knowledge: Dictionary of raw knowledge from sources
        tasks: List of tasks the knowledge will be used for
        
    Returns:
        Organized knowledge optimized for the specified tasks
    """
    pass

struct AgentRequirements:
    """
    Requirements for creating a new agent, extracted from user request.
    Contains the domain, tasks, and constraints that define what the agent should do.
    """
    domain: str
    tasks: list[str]
    constraints: dict

struct KnowledgePlan:
    """
    Plan for knowledge requirements and organization.
    Defines what knowledge sources are needed and how they should be synthesized.
    """
    required_sources: list[str]
    synthesis_needed: list[str]

struct AgentDeclaration:
    """
    Complete declaration of an agent's properties.
    Defines the agent's domains, tasks, capabilities, and knowledge sources.
    """
    domains: list[str]
    tasks: list[str]
    capabilities: list[str]
    knowledge_sources: list[str]

struct AgentDesign:
    """
    Complete design combining agent declaration and knowledge plan.
    Contains all information needed to generate the agent capability pack.
    """
    agent_declaration: AgentDeclaration
    knowledge_plan: KnowledgePlan

struct KnowledgePack:
    """
    Organized knowledge pack ready for agent consumption.
    Contains all knowledge organized and optimized for the agent's tasks.
    """
    common_na: str
    resources_na: str
    methods_na: str
    workflows_na: str
    metadata: dict

struct AgentCapabilityPack:
    """
    Complete agent capability pack with all components.
    Ready-to-use package that can be loaded to create a specialized agent.
    """
    agent_na: str
    knowledge_pack: KnowledgePack
    metadata: dict 