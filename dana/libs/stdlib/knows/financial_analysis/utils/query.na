"""Financial Data Query."""


from .types import FinDoc


__all__ = ['query_fin_data']


def query_fin_data(doc: FinDoc,
                   line_item: str, statement: str,
                   as_at_period_end: bool = False,
                   n_years: int = 1) -> str:  # TODO: Literal[1, 2, 3]
    """Query financial statement item value(s)."""

    if n_years == 1:
        time_period_str: str = (f'as at {doc.period.upper()} fiscal period end'
                                if as_at_period_end
                                else f'for {doc.period.upper()} fiscal period')

        query: str = (
f'What is value in {doc.currency.upper()} of

`{line_item}`
(or most similar-meaning reported line item)

on `{statement}`
(or most similar-meaning statement)

of {doc.company.upper()}

{time_period_str}?')

    else:
        time_period_str: str = ((
(f'as at following two annual fiscal period ends:
- previous annual fiscal period end immediately preceding {doc.period.upper()}; and
- current {doc.period.upper()} annual fiscal period end')
if as_at_period_end
else (
f'for following two annual fiscal periods:
- previous annual fiscal period end immediately preceding {doc.period.upper()}; and
- current {doc.period.upper()} annual fiscal period end'))

if n_years == 2

else (
(f'as at ends of past 3 annual fiscal periods
with the last year being {doc.period.upper()} annual fiscal period')
if as_at_period_end
else (
f'for past 3 fiscal years
with the last year being {doc.period.upper()} annual fiscal period')))

        query: str = (
f'What are values in {doc.currency.upper()}, arranged FROM PAST TO PRESENT, of

`{line_item}`
(or most similar-meaning reported line item)

on `{statement}`
(or most similar-meaning statement)

of {doc.company.upper()}

{time_period_str}?')

    if doc.path:
        return reason(query, resources=[use('rag', sources=[doc.path])])

    return llm(query)
