from dana.libs.stdlib.resources.rag_utilities.document_loader import DocumentLoader, load_sources
from dana.libs.stdlib.resources.rag_utilities.embedding_factory import get_embedding_model
from dana.libs.stdlib.resources.rag_utilities.storage_factory import get_duckdb_store, get_pgvector_store
from llama_index.core.ingestion.py import run_transformations
from llama_index.core.py import StorageContext, VectorStoreIndex
from llama_index.core.vector_stores.py import MetadataFilter, MetadataFilters, FilterOperator

# sources = ["https://www.aitomatic.com/", "/Users/lam/Desktop/repos/opendxa/docs/for-engineers", "/Users/lam/Desktop/repos/opendxa/agents/agent_1_untitled_agent/docs"]
sources = ["https://www.aitomatic.com/", "/Users/lam/Desktop/repos/opendxa/agents/agent_1_untitled_agent/docs"]

doc = DocumentLoader()
docs_dict = doc.load_sources(sources)

embedding_tuple = get_embedding_model(dimension_override=1800)
embedding_model = embedding_tuple[0]
dimension = embedding_tuple[1]
print(embedding_model)
vector_store = get_duckdb_store("test", "test", "test", embed_dim=dimension)

print(vector_store.embed_dim)

storage_context = StorageContext.from_defaults(vector_store=vector_store)

index = VectorStoreIndex.from_vector_store(vector_store, embed_model=embedding_model)

filters =MetadataFilters(filters=[MetadataFilter(key="source", operator=FilterOperator.IN, value=list(docs_dict.keys()))])
    
matched_nodes = index.vector_store.get_nodes(filters=filters)
existing_sources = set()
for node in matched_nodes:
    print(node.metadata)
    existing_sources.add(node.metadata["source"])

print(f"Cached sources : {existing_sources}")

left_over_sources = set(docs_dict.keys()).difference(existing_sources)

print(f"Left over sources : {left_over_sources}")

for source in left_over_sources:
    # print(type(docs_dict[source]))
    nodes = run_transformations(docs_dict[source], index._transformations, show_progress=True, embed_model=embedding_model)
    index.insert_nodes(nodes)

retriever = index.as_retriever(similarity_top_k=10, embed_model=embedding_model)
print(retriever.retrieve("What is the ARR of Aitomatic?"))
