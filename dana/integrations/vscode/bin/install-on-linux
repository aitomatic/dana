#!/usr/bin/env bash
# Install Dana Language Plugin on Linux
# Copyright ¬© 2025 Aitomatic, Inc. Licensed under the MIT License.
# This script installs the Dana language plugin after dependencies are ready

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_NAME="$(basename "$0")"
LOG_FILE="/tmp/dana-plugin-install.log"

# Function to log messages
log() {
    echo -e "$1" | tee -a "$LOG_FILE" >&2
}

# Function to ensure npm environment is properly configured
ensure_npm_environment() {
    log "${BLUE}üîß Ensuring npm environment is properly configured...${NC}"
    
    # Create npm global directory structure if it doesn't exist
    mkdir -p ~/.npm-global/lib/node_modules
    mkdir -p ~/.npm-global/bin
    
    # Configure npm to use user directory
    npm config set prefix "$HOME/.npm-global"
    
    # Add to PATH for current session
    export PATH="$HOME/.npm-global/bin:$PATH"
    
    # Verify npm configuration
    local npm_prefix=$(npm config get prefix 2>/dev/null || echo "")
    if [[ "$npm_prefix" != "$HOME/.npm-global" ]]; then
        log "${RED}‚ùå Error: Failed to configure npm prefix${NC}"
        exit 1
    fi
    
    # Verify the directory structure exists and is accessible
    if [[ ! -d "$HOME/.npm-global/lib" ]] || [[ ! -w "$HOME/.npm-global/lib" ]]; then
        log "${RED}‚ùå Error: npm global lib directory is not accessible${NC}"
        log "${YELLOW}üí° Attempting to fix permissions...${NC}"
        chmod -R 755 "$HOME/.npm-global" 2>/dev/null || true
        if [[ ! -w "$HOME/.npm-global/lib" ]]; then
            log "${RED}‚ùå Cannot fix npm global directory permissions${NC}"
            exit 1
        fi
    fi
    
    # Additional WSL-specific fixes
    log "${BLUE}üîß Applying WSL-specific fixes...${NC}"
    
    # Ensure npm cache directory exists and is accessible
    mkdir -p "$HOME/.npm/_cacache"
    chmod -R 755 "$HOME/.npm/_cacache" 2>/dev/null || true
    
    # Set npm cache directory explicitly
    npm config set cache "$HOME/.npm/_cacache"
    
    # Verify npm can write to its directories
    if ! npm config get cache &> /dev/null; then
        log "${YELLOW}‚ö†Ô∏è  Warning: npm cache configuration issue${NC}"
    fi
    
    log "${GREEN}‚úÖ npm environment properly configured${NC}"
}

# Function to check and install dependencies if needed
check_and_install_dependencies() {
    log "${BLUE}üîç Checking dependencies...${NC}"

    # Check if basic dependencies are available
    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        log "${YELLOW}‚ö†Ô∏è  Dependencies not ready, installing them automatically...${NC}"

        # Get the project root directory (same as setup_paths)
        local project_root="$(pwd)"
        local deps_script="$project_root/dana/integrations/vscode/bin/install-upgrade-linux-deps"

        # Check if the deps script exists
        if [[ ! -f "$deps_script" ]]; then
            log "${RED}‚ùå Dependencies script not found at ${deps_script}${NC}"
            log "${YELLOW}üí° Please ensure the Dana repository is properly cloned${NC}"
            exit 1
        fi

        # Make sure the deps script is executable
        chmod +x "$deps_script"

        # Run the dependencies installation
        log "${BLUE}üîÑ Running dependencies installation...${NC}"
        if DANA_AUTO_INSTALL=true "$deps_script"; then
            log "${GREEN}‚úÖ Dependencies installed successfully${NC}"
        else
            log "${RED}‚ùå Failed to install dependencies${NC}"
            log "${YELLOW}üí° Please run manually: ${deps_script}${NC}"
            exit 1
        fi

        # Verify dependencies are now available
        if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
            log "${RED}‚ùå Dependencies still not available after installation${NC}"
            log "${YELLOW}üí° Please restart your terminal and try again${NC}"
            exit 1
        fi
    else
        log "${GREEN}‚úÖ Dependencies ready${NC}"
    fi
}

# Function to check if target editor is available
check_editor() {
    local editor="$1"
    local editor_name="$2"

    if ! command -v "$editor" &> /dev/null; then
        log "${RED}‚ùå Error: $editor_name is not installed or not in PATH${NC}"
        log "${YELLOW}üí° Install with: sudo snap install $editor --classic${NC}"
        exit 1
    fi

    log "${GREEN}‚úÖ $editor_name available${NC}"
}

# Function to get project paths
setup_paths() {
    log "${BLUE}üìÅ Setting up project paths...${NC}"

    # Get the current working directory (where the script was called from)
    # This should be the project root when called via make
    PROJECT_ROOT="$(pwd)"
    EXTENSION_DIR="$PROJECT_ROOT/dana/integrations/vscode"

    log "${BLUE}üìÅ Project root: ${PROJECT_ROOT}${NC}"
    log "${BLUE}üìÅ Extension directory: ${EXTENSION_DIR}${NC}"

    # Check if extension directory exists
    if [[ ! -d "$EXTENSION_DIR" ]]; then
        log "${RED}‚ùå Error: Extension directory not found at ${EXTENSION_DIR}${NC}"
        exit 1
    fi

    # Change to extension directory
    cd "$EXTENSION_DIR"
    log "${GREEN}‚úÖ Changed to extension directory${NC}"
}

# Function to install npm dependencies
install_npm_dependencies() {
    log "${BLUE}üì¶ Installing npm dependencies...${NC}"

    # Check if package.json exists
    if [[ ! -f "package.json" ]]; then
        log "${RED}‚ùå Error: package.json not found in extension directory${NC}"
        exit 1
    fi

    # Ensure npm environment is properly configured
    ensure_npm_environment
    
    # Install dependencies with explicit cache directory
    log "${BLUE}üì¶ Installing dependencies...${NC}"
    export npm_config_cache="$HOME/.npm/_cacache"
    
    if ! npm install; then
        log "${RED}‚ùå Error: npm install failed${NC}"
        log "${YELLOW}üí° Attempting to clear npm cache and retry...${NC}"
        npm cache clean --force
        if ! npm install; then
            log "${RED}‚ùå Error: npm install failed even after cache cleanup${NC}"
            exit 1
        fi
    fi
    
    log "${GREEN}‚úÖ npm dependencies installed${NC}"

    # Fix permissions on TypeScript binary (common Linux issue)
    local tsc_bin="./node_modules/.bin/tsc"
    if [[ -f "$tsc_bin" ]]; then
        log "${BLUE}üîß Fixing TypeScript binary permissions...${NC}"
        chmod +x "$tsc_bin"
        log "${GREEN}‚úÖ TypeScript binary permissions fixed${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  TypeScript binary not found, checking if it's a symlink...${NC}"
        # Sometimes tsc is a symlink to another location
        if [[ -L "$tsc_bin" ]]; then
            local target=$(readlink "$tsc_bin")
            log "${BLUE}üîó TypeScript is symlinked to: $target${NC}"
            if [[ -f "$target" ]]; then
                chmod +x "$target"
                log "${GREEN}‚úÖ Target TypeScript binary permissions fixed${NC}"
            fi
        fi
    fi
}

# Function to compile TypeScript
compile_typescript() {
    log "${BLUE}üî® Compiling TypeScript...${NC}"

    # Check if compile script exists
    if ! grep -q '"compile"' package.json; then
        log "${RED}‚ùå Error: compile script not found in package.json${NC}"
        exit 1
    fi

    # Run compilation
    npm run compile
    log "${GREEN}‚úÖ TypeScript compilation completed${NC}"
}

# Function to package the extension
package_extension() {
    log "${BLUE}üì¶ Packaging extension...${NC}"

    # Ensure npm environment is still properly configured
    ensure_npm_environment
    
    # Check if vsce is already available
    if command -v vsce &> /dev/null; then
        log "${GREEN}‚úÖ @vscode/vsce already available${NC}"
    else
        # Install vsce globally first to avoid npx issues
        log "${BLUE}üì¶ Installing @vscode/vsce globally...${NC}"
        if ! npm install -g @vscode/vsce; then
            log "${RED}‚ùå Error: Failed to install @vscode/vsce globally${NC}"
            exit 1
        fi
    fi
    
    # Use vsce directly instead of npx
    log "${YELLOW}üì¶ Using @vscode/vsce directly...${NC}"
    
    # Package the extension and capture output
    local package_output
    local exit_code
    
    # Set npm cache directory to avoid permission issues
    export npm_config_cache="$HOME/.npm/_cacache"
    
    # Run the packaging command
    package_output=$(vsce package --allow-missing-repository 2>&1)
    exit_code=$?
    
    if [[ $exit_code -ne 0 ]]; then
        log "${RED}‚ùå Error: vsce packaging failed with exit code $exit_code${NC}"
        log "${YELLOW}Package output: ${package_output}${NC}"
        exit 1
    fi

    # Find the generated .vsix file
    VSIX_FILE=$(find . -name "*.vsix" -type f | head -n 1)

    if [[ -z "$VSIX_FILE" ]]; then
        log "${RED}‚ùå Error: No .vsix file found after packaging${NC}"
        log "${YELLOW}Package output: ${package_output}${NC}"
        exit 1
    fi

    log "${GREEN}‚úÖ Extension packaged: ${VSIX_FILE}${NC}"
    # Output only the file path to stdout (no color codes or extra text)
    printf "%s\n" "$VSIX_FILE"
}

# Function to install extension in editor
install_extension() {
    local vsix_file="$1"
    local editor="$2"
    local editor_name="$3"

    log "${BLUE}üîß Installing extension in ${editor_name}...${NC}"

    # Install the extension
    "$editor" --install-extension "$vsix_file"

    if [[ $? -eq 0 ]]; then
        log "${GREEN}‚úÖ Extension successfully installed in ${editor_name}!${NC}"
    else
        log "${RED}‚ùå Failed to install extension in ${editor_name}${NC}"
        exit 1
    fi
}

# Function to verify installation
verify_installation() {
    local editor="$1"
    local editor_name="$2"

    log "${BLUE}üîç Verifying installation...${NC}"

    # Check if editor can list extensions
    if "$editor" --list-extensions | grep -q "dana-language"; then
        log "${GREEN}‚úÖ Dana language extension found in ${editor_name}${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Dana language extension not found in ${editor_name} extensions list${NC}"
        log "${YELLOW}   This may be normal for some editors${NC}"
    fi

    log "${GREEN}‚úÖ Installation verification completed${NC}"
}

# Function to show success message and next steps
show_success() {
    local editor_name="$1"

    log ""
    log "${GREEN}üéâ Dana Language Support successfully installed in ${editor_name}!${NC}"
    log ""

    log "${YELLOW}üìù Next steps:${NC}"
    log "1. Open ${editor_name}"
    log "2. Create or open a .na file"
    log "3. Press F5 to run Dana code"
    log ""
    log "${BLUE}üí° Dana Features in ${editor_name}:${NC}"
    log "  - F5: Run current Dana file"
    log "  - Syntax highlighting for .na files"
    log "  - Real-time error checking (if LSP enabled)"
    log "  - Hover help on Dana keywords"
    log "  - Smart auto-completion"
    log ""
    log "${BLUE}üí° Tip: Make sure 'dana' command is in your PATH${NC}"

    # Check if local dana command is available
    local dana_cli="$PROJECT_ROOT/bin/dana"
    if [[ -x "$dana_cli" ]]; then
        log "${GREEN}‚úÖ Dana CLI is available at ${dana_cli}${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  Warning: Dana CLI not found at ${dana_cli}${NC}"
        log "${YELLOW}   The extension will look for 'dana' in PATH when running files${NC}"
    fi
}

# Function to show usage
show_usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] [EDITOR]

Install Dana Language Plugin on Linux

OPTIONS:
    -h, --help          Show this help message
    -v, --verbose       Enable verbose output
    --cursor            Install for Cursor editor
    --vscode           Install for VS Code editor

EDITOR:
    cursor              Install for Cursor (default)
    code                Install for VS Code
    vscode              Install for VS Code

EXAMPLES:
    $SCRIPT_NAME                    # Install for Cursor
    $SCRIPT_NAME cursor            # Install for Cursor
    $SCRIPT_NAME code              # Install for VS Code
    $SCRIPT_NAME --cursor          # Install for Cursor
    $SCRIPT_NAME --vscode          # Install for VS Code

NOTES:
    - Dependencies are automatically installed if needed
    - Target editor must be installed and accessible
    - Script handles both dependency setup and plugin installation

EOF
}

# Main execution
main() {
    local editor="cursor"
    local editor_name="Cursor"
    local verbose=false

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            --cursor)
                editor="cursor"
                editor_name="Cursor"
                shift
                ;;
            --vscode)
                editor="code"
                editor_name="VS Code"
                shift
                ;;
            cursor|code|vscode)
                if [[ "$1" == "vscode" ]]; then
                    editor="code"
                    editor_name="VS Code"
                else
                    editor="$1"
                    if [[ "$1" == "code" ]]; then
                        editor_name="VS Code"
                    else
                        editor_name="Cursor"
                    fi
                fi
                shift
                ;;
            *)
                log "${RED}‚ùå Error: Unknown option: $1${NC}"
                show_usage
                exit 1
                ;;
        esac
    done

    # Set verbose mode if requested
    if [[ "$verbose" == true ]]; then
        set -x
    fi

    log "${BLUE}üöÄ Dana Language Plugin - Linux Installer${NC}"
    log "${BLUE}==========================================${NC}"
    log "${BLUE}Target Editor: ${editor_name}${NC}"
    log "${YELLOW}üí° Dependencies will be automatically installed if needed${NC}"
    log ""

    # Run installation steps
    check_and_install_dependencies
    check_editor "$editor" "$editor_name"
    setup_paths
    install_npm_dependencies
    compile_typescript
    local vsix_file=$(package_extension)
    install_extension "$vsix_file" "$editor" "$editor_name"
    verify_installation "$editor" "$editor_name"
    show_success "$editor_name"

    log ""
    log "${GREEN}üéâ Installation completed successfully!${NC}"
    log "${BLUE}üìù Log saved to: $LOG_FILE${NC}"
}

# Run main function
main "$@"
