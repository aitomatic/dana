# pytest.ini - Test Configuration
# Copyright Â© 2025 Aitomatic, Inc. Licensed under the MIT License.

[pytest]
# Add project root to pythonpath
pythonpath = .

# Set the default loop scope for async fixtures
asyncio_default_fixture_loop_scope = function
filterwarnings =
    ignore::DeprecationWarning:websockets.legacy
    ignore::DeprecationWarning:lark.utils

# Verbose output and exclude live tests, deep tests, and real_api tests by default
# This makes CI runs faster by only running fast regression tests
# Suppress most logging output during tests to reduce noise
addopts = -v -s -m "not live and not deep and not real_api" --tb=short --log-level=ERROR

# For debugging specific tests, you can override with:
# pytest --log-cli-level=DEBUG --log-cli-format="%(asctime)s [%(levelname)8s] %(name)s: %(message)s" tests/your_test.py

# Log configuration - suppress most output except for errors
log_cli = false
log_cli_level = ERROR
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Auto-capture logs (pytest built-in, no explicit log_capture needed)
log_level = ERROR

# Specify the directory where tests are located
testpaths = tests

# Markers
markers =
    live: mark test as requiring external services (deselect with '-m "not live"')
    unit: mark test as a unit test (run with '-m unit')
    na_file: mark tests that execute .na files (may need real LLM)
    fast: mark test as a fast regression test (suitable for CI)
    deep: mark test as a comprehensive/integration test (run locally)
    slow: mark test as potentially slow (alias for deep)
    integration: mark test as an integration test
    poet: mark test as POET-related functionality (deselect with '-m "not poet"')
    dana: mark test as Dana language functionality (run with '-m dana')
    real_api: mark test as using real API keys and making actual API calls (run with '-m real_api')
