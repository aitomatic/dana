"""Agent problem-solving with Resources and Workflows."""


agent Neo


# Problem-Solving with Contextual Awareness from Resources
# ========================================================

print(Neo.solve('I am in Sapporo. Should I go out today? I like temperature 20-25 C.'))


# enhanced reasoning: with context from `resource_weather_info`,
# agent returns more informed & definitive solution
print('

CONTEXT-AWARE PROBLEM-SOLVING WITH RESOURCES
============================================
')

resource_weather_info = get_resource('mcp', url='http://127.0.0.1:8000/mcp')

print(Neo.solve('I am in Sapporo. Should I go out today? I like temperature 20-25 C.',
                resources=[resource_weather_info]))


# Problem-Solving with Expertise
# ==============================

print(Neo.solve('Is AMD capital-intensive?'))


# enhanced problem-solving: with context from `resource_amd_annual_report`,
# agent returns more informed solution
print('

CONTEXT-AWARE ENHANCED PROBLEM-SOLVING WITH RESOURCES
=====================================================
')

resource_amd_annual_report = get_resource('rag', sources=['../../resources/docs/AMD_2022_10K.pdf'])

print(Neo.solve('Is AMD capital-intensive?', resources=[resource_amd_annual_report]))


# expert-level problem-solving: with expert workflows,
# agent returns precise, sophisticated solution
from knows.financial_analysis.cap_intens import workflow_calc_fixed_asset_over_total_asset, workflow_calc_total_asset_over_rev, workflow_calc_capex_over_rev
from knows.financial_analysis.return_ratios import workflow_calc_roa_ratio

print('

EXPERT-LEVEL PROBLEM-SOLVING WITH RESOURCES & EXPERT WORKFLOW
=============================================================
')
print(Neo.solve('Is AMD capital-intensive?',
                resources=[resource_amd_annual_report],
                workflows=[workflow_calc_fixed_asset_over_total_asset,
                           workflow_calc_total_asset_over_rev,
                           workflow_calc_capex_over_rev,
                           workflow_calc_roa_ratio]))


# Instant Expert Agent
# by leveraging Dana's standard library's
# `ExpertAgent` blueprint and `knows` expertise packs
# ===================================================

from blueprints.expert_agent import ExpertAgent
from knows import financial_analysis

print("""

INSTANT EXPERT AGENT PROBLEM-SOLVING
leveraging Dana's standard library's
`ExpertAgent` blueprint and `knows` expertise packs
===================================================
""")

Neo = ExpertAgent(expertise=[financial_analysis])

print(Neo.solve('Is AMD capital-intensive?', resources=[resource_amd_annual_report]))
