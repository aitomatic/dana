from core.workflows import product_search_workflow
from core.config import MODEL_CONFIG, get_tabular_index_config
from time.py import time

log_level("warn")

def _get_product_data():
    tabular_index_config = get_tabular_index_config()
    product_data = use("tabular_index", tabular_index_config=tabular_index_config, _name="shared_product_data")
    return product_data

def _get_successful_results(single_search_result: list[any]) -> list[any]:
    successful_results = []
    response = single_search_result
    summary = {
        "query": response['query'],
        "total_results": response['total_results'],
        "confidence": response['confidence'],
        "reasoning": response['reasoning'],
    }
    if response['best_match']:
        summary["best_match"] = {
            "product_name": response['best_match']['product_name'],
            "mfr_part_num": response['best_match']['mfr_part_num'],
            "mfr_brand": response['best_match']['mfr_brand'],
        }
    else:
        summary["best_match"] = None
    successful_results.append(summary)
    return successful_results

def single_search(query: str, product_data = None) -> any:
    if product_data is None:
        product_data = _get_product_data()
    return product_search_workflow(query, product_data)

def batch_search(queries: list[str], batch_size: int) -> list[any]:
    product_data = _get_product_data()
    batch_results = []
    n = len(queries)
    i = 0
    start_time = time()
    while i < n:
        stop = i + batch_size
        if stop > n:
            stop = n

        print(f"Processing batch from {i} to {stop}")
        print(f"Batch size: {stop - i}")
        batch = queries[i:stop]

        batch_start_time = time()
        task_batch = []
        for query in batch:
            task_batch.append(single_search(query, product_data))

        batch_concurrency_time = time()
        print(f"Batch initialization time: {batch_concurrency_time - batch_start_time}s")

        for task in task_batch:
            result = _get_successful_results(task)
            batch_results.append(result)

        batch_end_time = time()
        print(f"Batch result processing time: {batch_end_time - batch_concurrency_time}s")

        i += batch_size
        print("")

    end_time = time()
    print(f"Total time: {end_time - start_time}s")
    print("")

    return batch_results
