# Data Processing Workflow Example - Dana Function Composition
# Demonstrates data transformation with simple Dana syntax

print("📊 Starting Data Processing Dana Workflow")

# Define simple data processing functions
def double_list(data: list[int]) -> list[int]:
    result = []
    for x in data:
        result.append(x * 2)
    return result

def sum_list(numbers: list[int]) -> int:
    total = 0
    for n in numbers:
        total = total + n
    return total

def create_report(sum_result: int) -> str:
    return "Sum of processed data: " + str(sum_result)

def validate_input(data: list[int]) -> list[int]:
    if len(data) == 0:
        raise "Empty input not allowed"
    return data

# Create data processing pipeline
data_pipeline = validate_input | double_list | sum_list | create_report

# Test with sample data
print("🔍 Executing data processing pipeline")
sample_data = [1, 2, 3, 4, 5]
result = data_pipeline(sample_data)
print(f"📈 Input data: {sample_data}")
print(f"✅ Processing result: {result}")

# Test with edge case
print("\n🧪 Testing edge case (empty data):")
try:
    empty_result = data_pipeline([])
    print(f"✅ Empty result: {empty_result}")
except as e:
    print(f"❌ Error handled: {str(e)}")

# Demonstrate pipeline reusability
print("\n🔄 Reusing pipeline with different data:")
test_cases = [
    [10, 20, 30],
    [5],
    [2, 4, 6, 8, 10, 12]
]

for data in test_cases:
    try:
        output = data_pipeline(data)
        print(f"✅ Data {data} → {output}")
    except as e:
        print(f"❌ Data {data} → Error: {str(e)}")

print("📊 Data processing workflow complete!")