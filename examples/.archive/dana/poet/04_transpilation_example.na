"""POET Transpilation Examples

This example demonstrates how to use POET to transpile functions with different
configurations and domains.
"""

import poet
from poet import POETClient

# Initialize POET client
client = POETClient()

# Example 1: Basic ML monitoring function
@poet(domain="ml_monitoring")
def predict_temperature(data: dict) -> float:
    """Predict temperature based on input data"""
    return data["temperature"]

# Example 2: Function with optimization target
@poet(domain="ml_monitoring", optimize_for="accuracy")
def predict_humidity(data: dict) -> float:
    """Predict humidity with accuracy optimization"""
    return data["humidity"]

# Example 3: Function with custom retries and timeout
@poet(
    domain="ml_monitoring",
    retries=5,
    timeout=60,
    enable_monitoring=True
)
def predict_pressure(data: dict) -> float:
    """Predict pressure with custom retry settings"""
    return data["pressure"]

# Example 4: Function with additional context
@poet(
    domain="ml_monitoring",
    context={
        "model_type": "regression",
        "input_features": ["temperature", "humidity", "pressure"]
    }
)
def predict_weather(data: dict) -> dict:
    """Predict weather conditions with model context"""
    return {
        "temperature": data["temperature"],
        "humidity": data["humidity"],
        "pressure": data["pressure"]
    }

# Example usage
def main():
    # Test data
    data = {
        "temperature": 25.5,
        "humidity": 0.65,
        "pressure": 1013.2
    }
    
    # Execute enhanced functions
    temp = predict_temperature(data)
    humidity = predict_humidity(data)
    pressure = predict_pressure(data)
    weather = predict_weather(data)
    
    # Print results
    print(f"Temperature: {temp}Â°C")
    print(f"Humidity: {humidity*100}%")
    print(f"Pressure: {pressure} hPa")
    print(f"Weather: {weather}")

if __name__ == "__main__":
    main() 