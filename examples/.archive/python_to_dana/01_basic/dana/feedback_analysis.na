# DANA Feedback Analysis - Customer Feedback System
# Demonstrates: structs + pipelines + AI reasoning working together

# Struct for processed feedback results
struct FeedbackResult:
    customer_name: str
    original_text: str
    sentiment: str
    topics: list
    ai_analysis: str
    priority: str
    timestamp: str

# Clean and process feedback text
def clean_feedback_text(text: str) -> str:
    # Simple text cleaning pipeline
    cleaned = text.strip()
    return cleaned

# Extract customer sentiment using AI
def analyze_sentiment(text: str) -> str:
    sentiment = reason(f"Analyze sentiment of this feedback: '{text}'. Respond with just: positive, negative, or neutral")
    return sentiment

# Extract key topics from feedback
def extract_topics(text: str) -> list:
    topics_str = reason(f"Extract 2-3 key topics from this feedback: '{text}'. Return as comma-separated list")
    # Convert AI response to list
    topics = topics_str.split(",")
    cleaned_topics = []
    for topic in topics:
        cleaned_topics.append(topic.strip())
    return cleaned_topics

# Get AI insights about the feedback
def get_ai_insights(text: str, sentiment: str) -> str:
    insights = reason(f"Provide brief business insights for this {sentiment} feedback: '{text}'. What should the company focus on?")
    return insights

# Determine priority based on sentiment and rating
def calculate_priority(sentiment: str, rating: int) -> str:
    result = ""
    if (sentiment == "negative") or (rating <= 2):
        result =  "high"
        
    if (sentiment == "positive") and (rating >= 4):
        result = "low"
    else:
        result = "medium"
    
    return result

# Main function to process customer feedback
def process_feedback(feedback: dict) -> FeedbackResult:
    # Clean the feedback text
    clean_text = clean_feedback_text(feedback["text"])
    
    # Analyze sentiment
    sentiment = analyze_sentiment(clean_text)
    
    # Extract topics
    topics = extract_topics(clean_text)
    
    # Get AI insights
    insights = get_ai_insights(clean_text, sentiment)
    
    # Calculate priority
    priority = calculate_priority(sentiment, feedback["rating"])
    
    # Return structured result
    return FeedbackResult(
        customer_name=feedback["customer"],
        original_text=feedback["text"],
        sentiment=sentiment,
        topics=topics,
        ai_analysis=insights,
        priority=priority,
        timestamp=feedback["timestamp"]
    )

# Generate summary report from processed feedback
def generate_summary_report(results: list) -> dict:
    total_count = len(results)
    positive_count = 0
    negative_count = 0
    high_priority_count = 0
    all_topics = []
    
    # Analyze all results
    for result in results:
        if result.sentiment == "positive":
            positive_count = positive_count + 1

        if result.sentiment == "negative":
            negative_count = negative_count + 1
            
        if result.priority == "high":
            high_priority_count = high_priority_count + 1
            
        # Collect all topics
        for topic in result.topics:
            all_topics.append(topic)
    
    # Get key themes using AI
    themes_text = reason(f"From these feedback topics: {all_topics}, identify the top 3 key business themes")
    
    return {
        "total_count": total_count,
        "positive_count": positive_count,
        "negative_count": negative_count,
        "high_priority_count": high_priority_count,
        "key_themes": themes_text
    } 
