# Basic Structs and Functions - Dana's Alternative to Python Classes
# ==================================================================
# PURPOSE: Demonstrate how Dana uses structs + functions instead of classes
# AUDIENCE: Developers familiar with Python classes
# LEARNING: Struct definition, function association, data encapsulation
# ==================================================================

log("=== Basic Structs and Functions Example ===")

# STRUCT DEFINITION: Like a Python class but data-only
# ===================================================
# In Python, you'd write:
# class Person:
#     def __init__(self, name, age, email):
#         self.name = name
#         self.age = age  
#         self.email = email

# In Dana, structs are pure data containers:
struct Person:
    name: str
    age: int
    email: str
    is_active: bool
    skills: list

# FUNCTIONS THAT WORK WITH STRUCTS
# ================================
# Instead of methods inside classes, Dana uses external functions

# Constructor-like function
def create_person(name: str, age: int, email: str) -> Person:
    """Create a new Person with default values"""
    return Person(
        name=name,
        age=age,
        email=email,
        is_active=true,
        skills=[]
    )

# "Method-like" functions that operate on the struct
def add_skill(person: Person, skill: str) -> Person:
    """Add a skill to a person (returns modified person)"""
    person.skills.append(skill)
    return person

def get_display_name(person: Person) -> str:
    """Get formatted display name"""
    status = "Active" if person.is_active else "Inactive"
    return f"{person.name} ({person.age}) - {status}"

def is_experienced(person: Person) -> bool:
    """Check if person has significant experience"""
    return len(person.skills) >= 3 and person.age >= 25

def deactivate_person(person: Person) -> Person:
    """Deactivate a person account"""
    person.is_active = false
    log(f"Deactivated user: {person.name}")
    return person

# USAGE EXAMPLES
# ==============
log("Creating people using structs and functions...")

# Create people using constructor function
alice = create_person("Alice Johnson", 28, "alice@example.com")
bob = create_person("Bob Smith", 22, "bob@example.com") 

log(f"Created: {get_display_name(alice)}")
log(f"Created: {get_display_name(bob)}")

# Add skills using functions
alice = add_skill(alice, "Python")
alice = add_skill(alice, "Machine Learning")
alice = add_skill(alice, "Data Analysis")
alice = add_skill(alice, "Project Management")

bob = add_skill(bob, "JavaScript")
bob = add_skill(bob, "React")

log(f"Alice's skills: {alice.skills}")
log(f"Bob's skills: {bob.skills}")

# Check experience levels
log(f"Alice is experienced: {is_experienced(alice)}")
log(f"Bob is experienced: {is_experienced(bob)}")

# Modify person state
log(f"Alice before: {get_display_name(alice)}")
alice = deactivate_person(alice)
log(f"Alice after: {get_display_name(alice)}")

# DIRECT FIELD ACCESS (Unlike private class attributes)
# ====================================================
log(f"Direct access - Alice's email: {alice.email}")
alice.email = "alice.johnson@newcompany.com"
log(f"Updated email: {alice.email}")

# KEY DIFFERENCES FROM PYTHON CLASSES:
# ====================================
log("\n=== Key Differences from Python Classes ===")
log("✅ Structs: Pure data containers (no methods inside)")
log("✅ Functions: External operations on structs")
log("✅ Named arguments: Required for struct creation")
log("✅ Direct access: All fields are public by default")
log("✅ Immutable pattern: Functions return modified structs")
log("✅ Composition: Combine small functions for complex behavior")

# COMPARISON SUMMARY:
# ==================
# Python Class Pattern:
#   person = Person("Alice", 28, "alice@example.com")
#   person.add_skill("Python")
#   display_name = person.get_display_name()
#
# Dana Struct + Function Pattern:
#   person = create_person("Alice", 28, "alice@example.com")
#   person = add_skill(person, "Python")
#   display_name = get_display_name(person)

log("=== Example Complete ===")