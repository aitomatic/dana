# LLM Concurrency Demo
# This demonstrates how the new llm() function enables concurrency in Dana

# Demo 1: Basic Promise Creation
def demo_basic_promise() -> None:
    print("=== Demo 1: Basic Promise Creation ===")
    
    # llm() returns a promise immediately
    promise = llm("What is the meaning of life?")
    print("Promise created instantly!")
    print("Promise type:", type(promise))
    
    # Accessing the promise triggers the actual LLM call
    print("Now accessing the promise...")
    result = promise
    print("Result:", result)
    print()

# Demo 2: Multiple Concurrent Calls
def demo_concurrent_calls() -> None:
    print("=== Demo 2: Multiple Concurrent Calls ===")
    
    # Create multiple promises - these are created instantly
    print("Creating multiple LLM promises...")
    
    promise1 = llm("What is the capital of France?")
    promise2 = llm("What is the capital of Japan?") 
    promise3 = llm("What is the capital of Brazil?")
    promise4 = llm("What is the capital of Australia?")
    promise5 = llm("What is the capital of Egypt?")
    
    print("Created 5 promises instantly!")
    
    # Now access all promises - they should resolve concurrently
    print("Accessing all promises (should trigger concurrent resolution)...")
    
    result1 = promise1
    result2 = promise2
    result3 = promise3
    result4 = promise4
    result5 = promise5
    
    print("All promises resolved!")
    
    print("Results:")
    print("France:", result1)
    print("Japan:", result2)
    print("Brazil:", result3)
    print("Australia:", result4)
    print("Egypt:", result5)
    print()

# Demo 3: Comparison with reason() function
def demo_vs_reason() -> None:
    print("=== Demo 3: llm() vs reason() Comparison ===")
    
    # Test reason() - synchronous
    print("Testing reason() (synchronous)...")
    reason_result = reason("What is 2+2?")
    print("reason() result:", reason_result)
    
    # Test llm() - asynchronous promise
    print("Testing llm() (asynchronous promise)...")
    llm_promise = llm("What is 2+2?")
    print("llm() promise created instantly!")
    
    llm_result = llm_promise
    print("llm() result:", llm_result)
    
    print("Results are similar:", reason_result == llm_result)
    print()

# Demo 4: Real-world concurrency scenario
def demo_real_world_concurrency() -> None:
    print("=== Demo 4: Real-world Concurrency Scenario ===")
    
    # Simulate a scenario where we need multiple pieces of information
    print("Simulating a research scenario...")
    
    # Create promises for different research questions
    weather_promise = llm("What's the weather like in Paris today?")
    news_promise = llm("What are the top 3 news headlines today?")
    math_promise = llm("What is 15 * 23?")
    quote_promise = llm("Give me an inspiring quote about learning.")
    
    print("All research promises created!")
    print("Now gathering all information...")
    
    # Gather all information
    weather = weather_promise
    news = news_promise
    math_result = math_promise
    quote = quote_promise
    
    print("Research Summary:")
    print("Weather:", weather)
    print("News:", news)
    print("Math:", math_result)
    print("Quote:", quote)
    print()

# Demo 5: Promise transparency
def demo_promise_transparency() -> None:
    print("=== Demo 5: Promise Transparency ===")
    
    # Create a promise
    promise = llm("What is the first letter of the alphabet?")
    
    # Promise should be transparent - we can use it like a string
    print("Promise length:", len(promise))
    print("Promise uppercase:", promise.upper())
    print("Promise contains 'A':", "A" in promise)
    
    # We can even use it in string operations
    combined = "The answer is: " + promise
    print("Combined string:", combined)
    print()

# Main demo function
def main() -> None:
    print("ðŸš€ LLM Concurrency Demo with Dana Promises")
    print("=" * 50)
    
    # Note: For real LLM calls, set DANA_MOCK_LLM=true in your environment
    # For this demo, we'll use the default mock behavior
    
    demo_basic_promise()
    demo_concurrent_calls()
    demo_vs_reason()
    demo_real_world_concurrency()
    demo_promise_transparency()
    
    print("âœ… Demo completed! The llm() function enables easy concurrency in Dana.")
    print("ðŸ’¡ Key benefits:")
    print("   - Instant promise creation")
    print("   - Automatic concurrent resolution")
    print("   - Transparent promise handling")
    print("   - Simple async/await-like behavior")

main()