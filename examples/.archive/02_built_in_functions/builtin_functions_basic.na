# Basic Built-in Functions Example
# This example shows the most commonly used Pythonic built-in functions in Dana

log("=== Basic Built-in Functions Example ===")

# Sample data
numbers = [10, 20, 30, 40, 50]
scores = [85, 92, 78, 96, 88]
name = "Dana"

log("\n--- Essential Collection Functions ---")

# len() - Get the length/size of collections
count = len(numbers)
log(f"We have {count} numbers")

name_length = len(name)
log(f"The name '{name}' has {name_length} characters")

# sum() - Add up all numbers in a collection
total = sum(numbers)
log(f"Sum of numbers: {total}")

total_score = sum(scores)
log(f"Total of all scores: {total_score}")

# max() and min() - Find the largest and smallest values
highest = max(scores)
lowest = min(scores)
log(f"Highest score: {highest}")
log(f"Lowest score: {lowest}")

log("\n--- Practical Calculations ---")

# Calculate average using built-in functions
average = sum(scores) / len(scores)
log(f"Average score: {average}")

# Find the range (difference between max and min)
score_range = max(scores) - min(scores)
log(f"Score range: {score_range}")

log("\n--- Type Conversion Functions ---")

# Convert between different data types
number_as_string = "42"
number_as_int = int(number_as_string)
log(f"String '{number_as_string}' converted to integer: {number_as_int}")

decimal_number = 3.14159
rounded_number = round(decimal_number, 2)
log(f"Pi rounded to 2 decimal places: {rounded_number}")

log("\n--- Boolean Logic Functions ---")

# Check if all values meet a condition
all_passing = [85, 90, 95, 88, 92]  # All scores >= 80
some_failing = [85, 90, 75, 88, 92]  # One score < 80

# Note: These would work with boolean lists in the actual implementation
# For demonstration, we'll show the concept
log("all() and any() functions check boolean conditions across collections")
log("all([True, True, True]) would return True")
log("any([False, True, False]) would return True")

log("\n--- Real-world Example: Grade Analysis ---")

# Analyze student grades using multiple built-in functions
def analyze_grades(grades):
    student_count = len(grades)
    total_points = sum(grades)
    average_grade = total_points / student_count
    highest_grade = max(grades)
    lowest_grade = min(grades)
    
    log(f"Class Analysis:")
    log(f"  Students: {student_count}")
    log(f"  Average: {average_grade}")
    log(f"  Highest: {highest_grade}")
    log(f"  Lowest: {lowest_grade}")
    log(f"  Range: {highest_grade - lowest_grade}")
    
    return average_grade

# Run the analysis
class_average = analyze_grades(scores)
log(f"\nClass average grade: {class_average}")

log("\n=== Example Complete ===")
log("These built-in functions make data processing much easier in Dana!") 