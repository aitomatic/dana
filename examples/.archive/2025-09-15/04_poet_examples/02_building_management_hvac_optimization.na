# Building Management HVAC Optimization with POET
# ===============================================
# INDUSTRY: Facilities, Real Estate, Smart Buildings
# USE CASE: HVAC Control with Automatic Enterprise Enhancement
# POET FEATURES: Equipment protection, energy optimization, safety interlocks
# LEARNING: How POET transforms simple control logic into safe enterprise systems
# ===============================================

log("🏢 Building Management POET Example - HVAC Optimization")

# SIMPLE HVAC CONTROL FUNCTION (what engineers write)
# ==================================================
@poet(domain="building_management", retries=2, timeout=10.0)
def set_hvac_temperature(zone_id: str, target_temp: float, current_temp: float, occupancy: int) -> dict:
    """
    Simple HVAC temperature control - core logic only.
    
    POET automatically adds:
    - Equipment safety interlocks (prevents damage)
    - Energy optimization algorithms
    - Demand response integration
    - Occupancy-aware adjustments
    - Equipment health monitoring
    """
    
    # SIMPLE core control logic (what the engineer focuses on)
    if occupancy == 0:
        # Energy saving mode when unoccupied
        return {"action": "setpoint", "temperature": target_temp - 3, "mode": "eco"}
    
    temp_diff = abs(target_temp - current_temp)
    
    if temp_diff > 5:
        # Large difference - aggressive adjustment
        return {"action": "setpoint", "temperature": target_temp, "mode": "fast"}
    elif temp_diff > 1:
        # Normal adjustment
        return {"action": "setpoint", "temperature": target_temp, "mode": "normal"}
    else:
        # Maintain current temperature
        return {"action": "maintain", "temperature": current_temp, "mode": "maintain"}

# ENERGY OPTIMIZATION FUNCTION (simple efficiency logic)
# ====================================================
@poet(domain="building_management", timeout=15.0, enable_training=true)
def optimize_energy_usage(zones: list, outside_temp: float, time_of_day: int) -> dict:
    """
    Simple energy optimization across zones.
    
    POET automatically adds:
    - Peak demand management
    - Load balancing across equipment
    - Weather-based optimization
    - Utility rate optimization
    - Equipment coordination
    """
    
    adjustments = []
    total_savings = 0
    
    for zone in zones:
        # Simple optimization rules
        if time_of_day >= 22 or time_of_day <= 6:  # Night hours
            savings = 2.0  # More aggressive savings at night
        elif zone["occupancy"] == 0:
            savings = 1.5  # Moderate savings when unoccupied
        else:
            savings = 0.5  # Minimal savings during occupied hours
        
        # Adjust based on outside temperature
        if abs(outside_temp - zone["target_temp"]) < 5:
            savings += 1.0  # Extra savings when outside temp is favorable
        
        adjustments.append({
            "zone_id": zone["zone_id"],
            "temp_adjustment": -savings,
            "estimated_savings_kwh": savings * 2.5
        })
        
        total_savings += savings * 2.5
    
    return {
        "adjustments": adjustments,
        "total_estimated_savings": total_savings,
        "optimization_applied": true
    }

# EQUIPMENT STATUS FUNCTION (simple health check)
# ==============================================
@poet(domain="building_management", retries=1, timeout=5.0)
def check_equipment_health(equipment_id: str, runtime_hours: float, last_maintenance: str) -> str:
    """
    Simple equipment health assessment.
    
    POET automatically adds:
    - Predictive maintenance scheduling
    - Equipment protection protocols
    - Performance trend analysis
    - Maintenance cost optimization
    - Safety compliance checking
    """
    
    # Simple health check logic
    if runtime_hours > 8760:  # More than a year of runtime
        return "maintenance_due"
    elif runtime_hours > 6000:  # Getting close to maintenance interval
        return "monitor_closely"
    else:
        return "healthy"

# USAGE EXAMPLES AND DEMONSTRATIONS
# =================================
log("\n=== Testing POET Building Management Examples ===")

# Example 1: HVAC control with various scenarios
log("\n--- HVAC Temperature Control (with POET enhancement) ---")

# Occupied zone control
control1 = set_hvac_temperature("Zone_A", 72.0, 75.0, 15)
log(f"Occupied zone (75°F → 72°F, 15 people) → {control1}")

# Unoccupied zone control (POET adds energy savings)
control2 = set_hvac_temperature("Zone_B", 70.0, 68.0, 0)
log(f"Unoccupied zone (68°F → 70°F, 0 people) → {control2}")

# Large temperature difference (POET adds equipment protection)
control3 = set_hvac_temperature("Zone_C", 68.0, 78.0, 8)
log(f"Large temp diff (78°F → 68°F, 8 people) → {control3}")

# Example 2: Energy optimization across multiple zones
log("\n--- Energy Optimization (with POET intelligence) ---")
sample_zones = [
    {"zone_id": "Zone_A", "target_temp": 72, "current_temp": 73, "occupancy": 12},
    {"zone_id": "Zone_B", "target_temp": 70, "current_temp": 69, "occupancy": 0},
    {"zone_id": "Zone_C", "target_temp": 74, "current_temp": 76, "occupancy": 5}
]

energy_result = optimize_energy_usage(sample_zones, 65.0, 14)  # 65°F outside, 2 PM
log(f"Energy optimization applied: {energy_result['optimization_applied']}")
log(f"Total estimated savings: {energy_result['total_estimated_savings']:.1f} kWh")
log(f"Number of zone adjustments: {len(energy_result['adjustments'])}")

# Example 3: Equipment health monitoring
log("\n--- Equipment Health Monitoring (with POET predictive analytics) ---")
health1 = check_equipment_health("HVAC_001", 3500, "2024-01-15")
log(f"Equipment HVAC_001 (3500 hours) → Status: {health1}")

health2 = check_equipment_health("HVAC_002", 7200, "2023-06-01")
log(f"Equipment HVAC_002 (7200 hours) → Status: {health2}")

health3 = check_equipment_health("HVAC_003", 9500, "2022-12-01")
log(f"Equipment HVAC_003 (9500 hours) → Status: {health3}")

# COMPARISON: Before vs After POET
# ===============================
log("\n=== POET Enhancement Demonstration ===")

# What engineer writes (simple):
def basic_hvac_control(target_temp: float, current_temp: float) -> dict:
    if current_temp > target_temp:
        return {"action": "cool"}
    else:
        return {"action": "heat"}

# What POET automatically provides:
log("✅ Engineer writes: ~15 lines of simple control logic")
log("✅ POET automatically adds:")
log("  - Equipment protection: Prevents temperature extremes that damage equipment")
log("  - Energy optimization: Reduces consumption by 15-25% through smart scheduling")
log("  - Safety interlocks: Ensures safe operating ranges for occupant comfort")
log("  - Demand response: Automatically responds to utility grid conditions")
log("  - Predictive maintenance: Schedules maintenance before equipment failures")
log("  - Load balancing: Coordinates multiple HVAC units for optimal efficiency")
log("  - Weather integration: Uses outside conditions for optimization")
log("  - Occupancy awareness: Adjusts operations based on space utilization")

# POET Benefits Demonstrated
# ==========================
log("\n=== POET Building Management Benefits ===")
log("🏗️  Architecture: Simple control functions + Building intelligence")
log("⚡ Energy Efficiency: 15-25% reduction in HVAC energy consumption")
log("🛡️  Equipment Protection: Automatic safety interlocks prevent damage")
log("🔧 Predictive Maintenance: Schedule maintenance before failures occur")
log("📊 Load Balancing: Optimal coordination across building systems")
log("🌡️  Comfort Optimization: Occupancy-aware temperature control")
log("💰 Cost Optimization: Peak demand management and utility rate optimization")
log("🔄 Reliability: Automatic failover and error recovery")
log("📈 Performance: Real-time optimization and learning from usage patterns")

log("🎉 Building Management POET Example Complete!")