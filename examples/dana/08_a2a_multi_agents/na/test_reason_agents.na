# Test: Reason Function with Agent Integration
# This demonstrates the new agents parameter in the reason function
# Following the pattern of use_a2a.na

system:agent_name = "GMA"
system:agent_description = "General purpose agent"

# Set up MCP resource for web search
websearch = use("mcp", url="http://localhost:8880/websearch")

# Create individual agents (same as use_a2a.na)
weather_agent = agent(
    url="http://localhost:5001",
    timeout=30
    )
trip_agent = agent(url="http://localhost:5002")
ticket_agent = agent(url="http://localhost:5003")

log_level("DEBUG")

print("=== Testing Reason Function with Agent Integration ===")

# Test 1: Standard reason function (backward compatibility)
# print("\n--- Test 1: Standard reason function (no agents) ---")
# task1 = "What is the capital of France?"
# standard_result = reason(task1, enable_ipv=False)
# print(f"Task: {task1}")
# print(f"Standard result: {standard_result}")

# Test 2: Reason with agent list - NEW SYNTAX
print("\n--- Test 2: Reason with agent list ---")
task2 = "What's the weather like in Paris for travel planning?"
agent_list_result = reason(task2, agents=[weather_agent, trip_agent], resources=[websearch], enable_ipv=False)
print(f"Task: {task2}")
print(f"Agent list result: {agent_list_result}")

# Test 3: Reason with agent pool - NEW SYNTAX  
print("\n--- Test 3: Reason with agent pool ---")
pool = agent_pool(agents=[weather_agent, trip_agent, ticket_agent])
task3 = "Plan a complete trip to Tokyo including weather and flights"
agent_pool_result = reason(task3, agents=pool, enable_ipv=False)
print(f"Task: {task3}")
print(f"Agent pool result: {agent_pool_result}")

# Test 4: Reason with agents + options - NEW SYNTAX
print("\n--- Test 4: Reason with agents and options ---")
task4 = "Analyze current weather patterns for travel decisions"
options_result = reason(task4, {"temperature": 0.3, "enable_ipv": False}, agents=[weather_agent], enable_ipv=False)
print(f"Task: {task4}")
print(f"Options + agents result: {options_result}")

# Test 5: Fallback behavior - agent list with unsuitable task
print("\n--- Test 5: Fallback behavior (unsuitable task for agents) ---")
task5 = "What is 2 + 2?"  # Math question - should fallback to LLM
math_result = reason(task5, agents=[weather_agent, trip_agent], enable_ipv=False)
print(f"Task: {task5}")
print(f"Math result (should be LLM fallback): {math_result}")

# Test 6: Empty agent list - should fallback to LLM
print("\n--- Test 6: Empty agent list fallback ---")
task6 = "Explain quantum physics in simple terms"
empty_result = reason(task6, agents=[], enable_ipv=False)
print(f"Task: {task6}")
print(f"Empty agents result: {empty_result}")

# Test 7: Compare old vs new approach
print("\n--- Test 7: Comparison - Old vs New Approach ---")
task7 = "Who is the CEO of Aitomatic"

# Old approach (from use_a2a.na)
print("Old approach:")
selected_agent = pool.select_agent(task7)
if selected_agent != None:
    old_result = selected_agent.solve(task7)
    print(f"Old result: {old_result}")
else:
    old_result = reason(task7, enable_ipv=False)
    print(f"Old fallback result: {old_result}")

# New approach
print("New approach:")
new_result = reason(task7, agents=pool)
print(f"New result: {new_result}")

print("\n=== All tests completed ===")
print("Note: Agent responses depend on running A2A servers at specified URLs")
print("If servers are not running, all calls will fallback to LLM reasoning") 