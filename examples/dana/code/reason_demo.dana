# DANA Language reason() statement demonstration
# Note: This requires an LLM to be configured in your DANA runtime context

# Set log level to see more information
log_level INFO

# ----------------------------------------------------------------------------
# 1. Basic reason() usage
# ----------------------------------------------------------------------------
# The reason() statement allows you to invoke an LLM for text generation
# directly within your DANA code. Here's the simplest form:

log.info("BASIC USAGE EXAMPLE")
reason("What is the capital of France?")

# ----------------------------------------------------------------------------
# 2. Assigning reasoning results to variables
# ----------------------------------------------------------------------------
# You can capture the output of reason() statements into variables

log.info("\nASSIGNING TO VARIABLES EXAMPLE")
capital_info = reason("List three interesting facts about Tokyo.")
log.info(f"Stored reasoning result: {capital_info}")

# ----------------------------------------------------------------------------
# 3. Passing context to reason()
# ----------------------------------------------------------------------------
# You can provide context to the LLM to improve its reasoning

log.info("\nCONTEXT EXAMPLE")

# Variables to use as context
temperature = 72.5
humidity = 45.3
pressure = 1013.2
location = "Server Room A"

# Method 1: Using f-strings to include context
activity_suggestion = reason(f"""
Given the following conditions:
- Temperature: {temperature}Â°F
- Humidity: {humidity}%
- Pressure: {pressure} hPa
- Location: {location}

Is this environment within acceptable parameters for server operations?
""")
log.info(f"Environment assessment: {activity_suggestion}")

# Method 2: Using the context parameter
server_analysis = reason("Analyze these environmental conditions and suggest any actions needed", 
                context=[temperature, humidity, pressure, location])
log.info(f"Analysis result: {server_analysis}")

# ----------------------------------------------------------------------------
# 4. Using different format options
# ----------------------------------------------------------------------------
# The reason() statement accepts a 'format' parameter to structure the output

log.info("\nFORMAT EXAMPLE")

# JSON format
json_summary = reason("Create a summary of the current conditions with any potential issues", 
                    context=[temperature, humidity, pressure, location],
                    format="json")
log.info(f"JSON result: {json_summary}")

# Bullet points format
bullets_result = reason("List three ways to optimize server room efficiency.", format="bullets")
log.info(f"Bullet points: {bullets_result}")

# Custom format (here requesting a specific structure)
custom_result = reason("Compare air cooling vs. liquid cooling for servers.", format="pros_and_cons")
log.info(f"Custom format: {custom_result}")

# ----------------------------------------------------------------------------
# 5. Error handling
# ----------------------------------------------------------------------------
# You can use try/except to handle potential errors from reason() calls

log.info("\nERROR HANDLING EXAMPLE")

try:
    # This could fail if the LLM service is unavailable or other runtime issues
    complex_reasoning = reason("Explain quantum computing's relevance to server optimization in 50 words.")
    log.info(f"Success! Result: {complex_reasoning}")
except Exception as e:
    log.error(f"Error occurred during reasoning: {e}")
    # You could implement fallback behavior here
    fallback_response = "Unable to complete reasoning task. Using fallback response."
    log.info(f"Using fallback: {fallback_response}")

# ----------------------------------------------------------------------------
# Advanced usage - Chaining reasoning
# ----------------------------------------------------------------------------
# You can use the output of one reason() as input to another

log.info("\nCHAINING EXAMPLE")

issue = reason("Identify a potential issue that might occur in a server room with the following conditions:", 
              context=[temperature, humidity, pressure, location])
solution = reason(f"Recommend a solution for this server room issue: {issue}")
implementation = reason(f"Outline steps to implement this solution: {solution}")

log.info(f"Identified issue: {issue}")
log.info(f"Recommended solution: {solution}")
log.info(f"Implementation steps: {implementation}")

log.info("\nDEMONSTRATION COMPLETE")