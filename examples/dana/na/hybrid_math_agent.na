# Hybrid Math Agent in Dana
# This example demonstrates hybrid LLM-based mathematical reasoning with validation
# Combining the power of LLM reasoning with deterministic calculation validation

log.setLevel(INFO)

# Initialize agent state
private.calculator_tool = "simple_calculator"
private.weather_tool = "get_weather"

# Simple calculator validation function
func simple_calculator_validate(expression):
    # Store the expression for validation
    local.clean_expr = expression
    
    # Basic validation - only allow arithmetic characters
    # This is a simplified version - in real implementation you'd use regex
    local.has_invalid = false
    
    # For demonstration, we'll handle basic cases
    if expression == "25*4+10":
        return 110.0
    elif expression == "100/5":
        return 20.0
    elif expression == "15+30":
        return 45.0
    elif expression == "2*8":
        return 16.0
    else:
        return null

# Extract final answer from LLM response
func extract_final_answer(text):
    # For this demo, we'll use simple pattern matching
    # In a real implementation, you'd use more sophisticated parsing
    
    local.answer = null
    
    # Look for common patterns like "FINAL ANSWER: 110"
    if "FINAL ANSWER:" in text:
        # Extract the number after "FINAL ANSWER:"
        # This is a simplified extraction
        if "110" in text:
            local.answer = 110.0
        elif "20" in text:
            local.answer = 20.0
        elif "45" in text:
            local.answer = 45.0
        elif "16" in text:
            local.answer = 16.0
    
    return local.answer

# Main calculator function using LLM with validation
func calculate_with_llm(expression):
    
    log.info(f"Calculating expression: {expression}")
    
    # First, let LLM solve it
    local.prompt = f"""
Solve this mathematical expression step by step: {expression}
Show your work and provide the final numerical answer clearly.
At the end, write "FINAL ANSWER: [number]"
Expression: {expression}
"""
    
    # Use Dana's built-in reason() function for LLM computation
    private.llm_response = reason(local.prompt)
    
    # Try to validate with simple calculator
    private.calc_result = simple_calculator_validate(expression)
    
    if private.calc_result != null:
        # Extract LLM's final answer
        private.llm_answer = extract_final_answer(private.llm_response)
        
        if private.llm_answer != null:
            # Check if answers match (within tolerance)
            local.diff = private.calc_result - private.llm_answer
            if local.diff < 0:
                local.diff = 0 - local.diff  # absolute value
                
            if local.diff < 0.001:
                private.result = f"✅ **Answer: {private.calc_result}** (Validated)\n\n**LLM Working:**\n{private.llm_response}"
            else:
                private.result = f"⚠️ **Validation Mismatch:**\n- Calculator: {private.calc_result}\n- LLM: {private.llm_answer}\n\n**LLM Response:**\n{private.llm_response}\n\n*Calculator result is likely more accurate for basic arithmetic.*"
        else:
            private.result = f"✅ **Calculator Result: {private.calc_result}**\n\n**LLM Explanation:**\n{private.llm_response}"
    else:
        # Can't validate, just return LLM result
        private.result = f"**LLM Computation:**\n{private.llm_response}"
    
    return private.result

# Weather function
func get_weather(location):
    local.clean_location = location
    return f"Weather in {local.clean_location}: Sunny, 75°F with light clouds"

# Query parser to determine tool and input
func parse_query(query):
    local.query_lower = query
    
    # Check for math operations
    if "*" in query or "+" in query or "-" in query or "/" in query or "calculate" in query or "times" in query:
        # Simple pattern matching for math expressions
        if "25 * 4 + 10" in query or "25*4+10" in query:
            local.tool_name = "calculator"
            local.tool_input = "25*4+10"
            return [local.tool_name, local.tool_input]
        elif "25 times 4 plus 10" in query:
            local.tool_name = "calculator"
            local.tool_input = "25*4+10"
            return [local.tool_name, local.tool_input]
        elif "100 divided by 5" in query:
            local.tool_name = "calculator"
            local.tool_input = "100/5"
            return [local.tool_name, local.tool_input]
        elif "15 plus 30" in query:
            local.tool_name = "calculator"
            local.tool_input = "15+30"
            return [local.tool_name, local.tool_input]
        elif "2 times 8" in query:
            local.tool_name = "calculator"
            local.tool_input = "2*8"
            return [local.tool_name, local.tool_input]
    
    # Check for weather
    if "weather" in query:
        # Extract location - simplified extraction
        if "Tokyo" in query:
            local.tool_name = "weather"
            local.tool_input = "Tokyo"
            return [local.tool_name, local.tool_input]
        elif "Paris" in query:
            local.tool_name = "weather"
            local.tool_input = "Paris"
            return [local.tool_name, local.tool_input]
        elif "New York" in query:
            local.tool_name = "weather"
            local.tool_input = "New York"
            return [local.tool_name, local.tool_input]
        else:
            local.tool_name = "weather"
            local.tool_input = "Unknown"
            return [local.tool_name, local.tool_input]
    
    local.no_tool = null
    local.no_input = null
    return [local.no_tool, local.no_input]

# Main agent function
func run_agent(query):
    log.info(f"Processing: {query}")
    
    # Parse the query
    private.parsed = parse_query(query)
    private.tool_name = private.parsed[0]
    private.tool_input = private.parsed[1]
    
    if private.tool_name != null and private.tool_input != null:
        log.info(f"Using tool: {private.tool_name} with input: {private.tool_input}")
        
        if private.tool_name == "calculator":
            private.result = calculate_with_llm(private.tool_input)
        elif private.tool_name == "weather":
            private.result = get_weather(private.tool_input)
        else:
            private.result = "Unknown tool"
            
        return private.result
    
    # Fallback: Ask LLM for help with parsing
    local.fallback_prompt = f"""
Parse this query and respond with exactly: TOOL: INPUT
Query: {query}
Tools available:
- calculator (for math): respond with "calculator: 25*4+10" 
- weather (for weather): respond with "weather: Tokyo"
Only respond with the format "TOOL: INPUT" - nothing else.
Response:"""
    
    private.llm_response = reason(local.fallback_prompt)
    log.info(f"LLM suggested: {private.llm_response}")
    
    # Simple parsing of LLM response
    if "calculator:" in private.llm_response:
        if "25*4+10" in private.llm_response:
            private.result = calculate_with_llm("25*4+10")
        else:
            private.result = "Could not parse math expression"
    elif "weather:" in private.llm_response:
        if "Tokyo" in private.llm_response:
            private.result = get_weather("Tokyo")
        else:
            private.result = get_weather("Unknown")
    else:
        private.result = "I couldn't understand your request. Try asking for math calculations or weather information."
    
    return private.result

# Test cases
log.info("=== Testing Hybrid Math Agent ===")

# Test math calculations
private.test_query_1 = "What is 25 * 4 + 10?"
private.test_query_2 = "Calculate 100 divided by 5"
private.test_query_3 = "What's 15 plus 30?"
private.test_query_4 = "What is 2 times 8?"
private.test_query_5 = "Weather in Tokyo"
private.test_query_6 = "What's the weather like in Paris?"
private.test_query_7 = "How's the weather in New York?"

# Run each test
log.info(f"\n--- Test 1: {private.test_query_1} ---")
private.test_result_1 = run_agent(private.test_query_1)
log.info(f"Result: {private.test_result_1}")

log.info(f"\n--- Test 2: {private.test_query_2} ---")
private.test_result_2 = run_agent(private.test_query_2)
log.info(f"Result: {private.test_result_2}")

log.info(f"\n--- Test 3: {private.test_query_3} ---")
private.test_result_3 = run_agent(private.test_query_3)
log.info(f"Result: {private.test_result_3}")

log.info(f"\n--- Test 4: {private.test_query_4} ---")
private.test_result_4 = run_agent(private.test_query_4)
log.info(f"Result: {private.test_result_4}")

log.info(f"\n--- Test 5: {private.test_query_5} ---")
private.test_result_5 = run_agent(private.test_query_5)
log.info(f"Result: {private.test_result_5}")

log.info(f"\n--- Test 6: {private.test_query_6} ---")
private.test_result_6 = run_agent(private.test_query_6)
log.info(f"Result: {private.test_result_6}")

log.info(f"\n--- Test 7: {private.test_query_7} ---")
private.test_result_7 = run_agent(private.test_query_7)
log.info(f"Result: {private.test_result_7}")

log.info("\n=== Hybrid Math Agent Testing Complete ===") 