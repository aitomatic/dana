# POET Mathematical Operations Examples
# Demonstrates Use Case A: Simple Math Functions with P→O→E enhancement

# Example 1: Safe Division with automatic zero-check
@poet(domain="mathematical_operations", retries=2)
def safe_divide(a: float, b: float) -> float:
    """Safely divide two numbers with POET enhancement."""
    return a / b

# Example 2: Square root with domain validation
@poet(domain="mathematical_operations", retries=3)
def safe_sqrt(x: float) -> float:
    """Calculate square root with automatic domain validation."""
    import math
    return math.sqrt(x)

# Example 3: Logarithm with automatic checks
@poet(domain="mathematical_operations")
def safe_log(x: float, base: float = 2.718281828) -> float:
    """Calculate logarithm with enhanced validation."""
    import math
    if base == 2.718281828:
        return math.log(x)
    else:
        return math.log(x) / math.log(base)

# Example 4: Percentage calculation with business rules
@poet(domain="mathematical_operations", retries=1)
def calculate_percentage(value: float, total: float) -> float:
    """Calculate percentage with automatic validation."""
    return (value / total) * 100

# Example 5: Complex calculation with stability checks
@poet(domain="mathematical_operations", retries=2, timeout=10)
def stable_calculation(a: float, b: float, c: float) -> float:
    """Perform complex calculation with numerical stability."""
    # POET will automatically check for:
    # - NaN/Infinity in inputs
    # - Division by zero
    # - Numerical overflow
    # - Result validation
    result = (a * b) / (c - a)
    return result ** 0.5

# === DEMONSTRATION ===
log("=== POET Mathematical Operations Examples ===")
log("")

# Test 1: Division by zero is caught in Perceive phase
log("Test 1: Division by zero protection")
try:
    result = safe_divide(10.0, 0.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught in Perceive phase: {e}")

# Test 2: Normal division works
log("\nTest 2: Normal division")
result = safe_divide(10.0, 2.0)
log(f"  Result: {result}")

# Test 3: Square root of negative number
log("\nTest 3: Square root domain validation")
try:
    result = safe_sqrt(-4.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught domain error: {e}")

# Test 4: Valid square root
log("\nTest 4: Valid square root")
result = safe_sqrt(16.0)
log(f"  Result: {result}")

# Test 5: Logarithm of non-positive number
log("\nTest 5: Logarithm domain validation")
try:
    result = safe_log(0.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught domain error: {e}")

# Test 6: Percentage with zero total
log("\nTest 6: Percentage calculation with zero total")
try:
    result = calculate_percentage(50.0, 0.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught division by zero: {e}")

# Test 7: Complex calculation with potential issues
log("\nTest 7: Complex calculation with stability checks")
try:
    # This would cause division by zero: (5-5) in denominator
    result = stable_calculation(5.0, 10.0, 5.0)
    log(f"  Result: {result}")
except (ValueError, RuntimeError) as e:
    log(f"  ✓ Caught error: {e}")

# Test 8: NaN input detection
log("\nTest 8: NaN input detection")
try:
    import math
    result = safe_divide(math.nan, 5.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught NaN input: {e}")

# Test 9: Infinity input detection
log("\nTest 9: Infinity input detection")
try:
    import math
    result = safe_divide(math.inf, 5.0)
    log(f"  Result: {result}")
except ValueError as e:
    log(f"  ✓ Caught infinity input: {e}")

log("\n=== Summary ===")
log("POET enhances mathematical functions with:")
log("1. Automatic input validation in Perceive phase")
log("2. Division by zero detection BEFORE execution")
log("3. NaN and infinity checking")
log("4. Domain-specific constraints (sqrt, log)")
log("5. Retry logic for transient errors")
log("6. Numerical stability monitoring")
log("7. Result validation in Enforce phase")
log("")
log("All without changing the original function logic!")