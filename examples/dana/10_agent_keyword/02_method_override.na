# Dana Agent Keyword - Method Override Example
# This example demonstrates how to override built-in agent methods

log("🚀 Dana Agent Keyword - Method Override Example")
log("=" * 50)

# ============================================================================
# 1. AGENT DEFINITION
# ============================================================================

log("\n📋 1. Agent Definition")
log("-" * 30)

# Define an agent with built-in intelligence
agent QualityInspector:
    domain: str = "semiconductor"
    expertise_level: str = "senior"
    tolerance_threshold: float = 0.015

log("✅ Agent type 'QualityInspector' defined")

# ============================================================================
# 2. CUSTOM METHOD OVERRIDES
# ============================================================================

log("\n🔧 2. Custom Method Overrides")
log("-" * 30)

# Override the built-in plan() method with custom logic
def plan(inspector: QualityInspector, objective: str, context: dict) -> list[str]:
    log(f"🔧 Using CUSTOM plan() method for objective: {objective}")
    
    # Custom planning logic based on inspector configuration
    custom_steps = []
    
    if inspector.domain == "semiconductor":
        custom_steps.append("1. Perform wafer-level inspection")
        custom_steps.append("2. Check for surface defects")
        custom_steps.append("3. Verify dimensional accuracy")
    
    if inspector.expertise_level == "senior":
        custom_steps.append("4. Senior review and approval")
    
    return custom_steps

# Override the built-in solve() method with custom logic
def solve(inspector: QualityInspector, problem: str, context: dict) -> dict:
    log(f"🔧 Using CUSTOM solve() method for problem: {problem}")
    
    # Custom problem-solving logic
    solution = {
        "problem": problem,
        "inspector_domain": inspector.domain,
        "custom_solution": f"Custom solution for {problem}",
        "recommended_actions": []
    }
    
    # Add domain-specific recommendations
    if inspector.domain == "semiconductor":
        solution["recommended_actions"].extend([
            "Review process parameters",
            "Check equipment calibration"
        ])
    
    return solution

log("✅ Custom plan() and solve() methods defined")

# ============================================================================
# 3. AGENT INSTANTIATION AND METHOD CALLS
# ============================================================================

log("\n🎯 3. Agent Instantiation and Method Calls")
log("-" * 30)

# Create agent instance
inspector = QualityInspector(
    domain="semiconductor",
    expertise_level="senior",
    tolerance_threshold=0.012
)

log(f"✅ Created inspector: {inspector}")

# Call plan() - should use CUSTOM method, not built-in AI
log("\n📋 Testing plan() method (should use CUSTOM):")
plan_result = inspector.plan(
    "Inspect wafer batch WB-2024-001",
    context={
        "batch_id": "WB-2024-001",
        "wafer_count": 25
    }
)

log(f"📝 Plan Result: {plan_result}")

# Call solve() - should use CUSTOM method, not built-in AI
log("\n🔍 Testing solve() method (should use CUSTOM):")
solve_result = inspector.solve(
    "High defect rate in etching process",
    context={
        "defect_rate": 0.08,
        "acceptable_threshold": 0.015
    }
)

log(f"💡 Solve Result: {solve_result}")

# ============================================================================
# 4. COMPARISON: CUSTOM VS BUILT-IN METHODS
# ============================================================================

log("\n🔄 4. Comparison: Custom vs Built-in Methods")
log("-" * 30)

# Create another inspector without custom methods to compare
inspector_builtin = QualityInspector(
    domain="semiconductor",
    expertise_level="junior"
)

log("✅ Created inspector_builtin for comparison")

# Call plan() on built-in inspector (should use AI)
log("\n📋 Testing plan() on built-in inspector (should use AI):")
builtin_plan = inspector_builtin.plan(
    "Inspect wafer batch WB-2024-001",
    context={
        "batch_id": "WB-2024-001",
        "wafer_count": 25
    }
)

log(f"📝 Built-in Plan Result: {builtin_plan}")

# Call solve() on built-in inspector (should use AI)
log("\n🔍 Testing solve() on built-in inspector (should use AI):")
builtin_solve = inspector_builtin.solve(
    "High defect rate in etching process",
    context={
        "defect_rate": 0.08,
        "acceptable_threshold": 0.015
    }
)

log(f"💡 Built-in Solve Result: {builtin_solve}")

# ============================================================================
# 5. METHOD RESOLUTION SUMMARY
# ============================================================================

log("\n📊 5. Method Resolution Summary")
log("-" * 30)

log("""
Method Resolution Order:
1. Custom method defined in current scope (highest priority)
2. Built-in AI-powered method (fallback)

Examples:
- inspector.plan() → Uses custom plan() method
- inspector_builtin.plan() → Uses built-in AI plan() method
""")

# ============================================================================
# 6. BEST PRACTICES
# ============================================================================

log("\n💡 6. Best Practices")
log("-" * 30)

log("""
✅ Best Practices for Method Overriding:

1. **Parameter Naming**: Use descriptive names (not 'agent' - it's reserved)
   ✅ def plan(inspector: QualityInspector, ...)
   ❌ def plan(agent: QualityInspector, ...)

2. **Type Hints**: Always include proper type hints
   ✅ def solve(inspector: QualityInspector, problem: str, context: dict) -> dict
   ❌ def solve(inspector, problem, context)

3. **Return Types**: Match expected return types
   - plan() typically returns list[str]
   - solve() typically returns dict
""")

# ============================================================================
# 7. SUMMARY
# ============================================================================

log("\n🎯 7. Summary")
log("-" * 30)

log("""
✅ What we've learned:
- How to override built-in agent methods
- Custom vs built-in method resolution
- Best practices for method overrides

🚀 Next steps:
- Explore type hint adaptation (03_type_hint_adaptation.na)
- Learn memory systems (04_memory_systems.na)
""")

log("\n🎉 Method Override Example Complete!")
log("You can now customize agent behavior while maintaining built-in capabilities!") 