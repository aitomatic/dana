from .. import util_submodule
from ..util_submodule import small_submodule as small_util_submodule_in_big_util_submodule
from ..util_submodule.small_submodule import I_AM as SMALL_UTIL_SUBMODULE_IN_BIG_UTIL_SUBMODULE

from . import small_submodule as small_submodule_in_big_submodule_with_nonempty_init
from .small_submodule import I_AM as SMALL_SUBMODULE_IN_BIG_SUBMODULE_WITH_NONEMPTY_INIT


I_AM = 'a big sub-module with a non-empty `__init__.na`, in a package'


# access `util_submodule` and its nested objects
print(f'
IMPORTED: {util_submodule}
INTO: {I_AM}
')

print(f'
USED: {util_submodule.small_submodule}
IN: {I_AM}
')

print(f'
USED: {util_submodule.small_submodule.I_AM}
IN: {I_AM}
')


# access `small_util_submodule_in_big_util_submodule` and its nested objects
print(f'
IMPORTED: {small_util_submodule_in_big_util_submodule}
INTO: {I_AM}
')

print(f'
USED: {small_util_submodule_in_big_util_submodule.I_AM}
IN: {I_AM}
')


# access `SMALL_UTIL_SUBMODULE_IN_BIG_UTIL_SUBMODULE`
print(f'
IMPORTED: {SMALL_UTIL_SUBMODULE_IN_BIG_UTIL_SUBMODULE}
INTO: {I_AM}
')


# access `small_submodule_in_big_submodule_with_nonempty_init` and its nested objects
print(f'
IMPORTED: {small_submodule_in_big_submodule_with_nonempty_init}
INTO: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.I_AM}
IN: {I_AM}
')

print(f'
IMPORTED: {SMALL_SUBMODULE_IN_BIG_SUBMODULE_WITH_NONEMPTY_INIT}
INTO: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.util_submodule}
IN: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.util_submodule.small_submodule}
IN: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.small_util_submodule_in_big_util_submodule}
IN: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.util_submodule.small_submodule.I_AM}
IN: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.small_util_submodule_in_big_util_submodule.I_AM}
IN: {I_AM}
')

print(f'
USED: {small_submodule_in_big_submodule_with_nonempty_init.SMALL_UTIL_SUBMODULE_IN_BIG_UTIL_SUBMODULE}
IN: {I_AM}
')
