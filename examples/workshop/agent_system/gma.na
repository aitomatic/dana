"""General-Management Agent."""

# Define components of Agent Card
system:agent_name = "General-Management Agent"
system:agent_description = "A general-management agent that can manage a team of agents"

import json.py

# Register other agents
from specialist_agent_1 import WeatherAgent
from specialist_agent_2 import WebSearcherAgent
from specialist_agent_3 import FlightTicketAgent

weather_agent = WeatherAgent()
search_agent = WebSearcherAgent()
ticketing_agent = FlightTicketAgent()

# Create a pool of agents
pool = agent_pool(agents=[weather_agent, search_agent, ticketing_agent])

# Print the pool of agents
all_available_agents = pool.get_agent_cards()

# Agent's problem solver
def plan(task, available_agents):
    # NEED TO BE FIXED
    steps = reason(f"Create a plan to solve the task {task} using the following agents: {available_agents}. Return only an array of steps in json format, nothing else, not even ```json or ```")
    # steps : list = reason(f"Create a plan to solve the task {task} using the following agents: {available_agents}")
    print(steps)
    return {"task": task, "steps": json.loads(steps)}

def execute(data):
    print(data)
    task = data["task"]
    steps = data["steps"]
    context = ""
    for step in steps:
        print(step)
        answer : str = reason(f"Task: {task} Current Step: {step}. Current result : {context}. Action: Perform this step, return the result, and briefly describe how it helps achieve the overall task.", agents=pool)
        context = context + answer
        print(f"Answer: {answer}")

    return reason(f"Based on this information : {context}, return the final and comprehensive answer to the task : {task}")

workflow = plan | execute

def __main__(trip_request="plan for me a trip to Tokyo today"):
    print(workflow(trip_request, all_available_agents))
