"""Cash Flow Statement Items."""


# TODO: relative importing in Dana
from fin_statements.util import query_fin_data, CompanyAndPeriodAndCurrency, CurrAndPrevNums


__all__ = [
    'get_op_cf', 'get_op_cf_2y', 'get_op_cf_3y',

    'get_capex', 'get_capex_2y', 'get_capex_3y',

    'get_deprec_and_amort', 'get_deprec_and_amort_2y', 'get_deprec_and_amort_3y',

    'get_div', 'get_div_2y', 'get_div_3y',
]


# TODO: multi-line string concatenation
CF_STATEMENT: str = '(Consolidated) Cash Flow(s) Statement(s), a.k.a. (Consolidated) Statement(s) of Cash Flows'

OP_CF_LINE_ITEM: str = '(Net) Cash Flows from Operations, a.k.a. (Net) Operating Cash Flows'

# TODO: multi-line string concatenation
CAPEX_LINE_ITEM: str = 'Capital Expenditure(s), a.k.a. CapEx, or Capital Spending, or Property, Plant & Equipment (PP&E) Expenditure(s)/Purchase(s)'

# TODO: multi-line string concatenation
DnA_LINE_ITEM: str = 'Depreciation & Amortization, a.k.a. D&A (of Fixed Assets or Property, Plant & Equipment (PP&E))'

DIV_LINE_ITEM: str = 'Cash Dividends'


def get_op_cf(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Operating Cash Flow from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=OP_CF_LINE_ITEM,
                          statement=CF_STATEMENT)


def get_op_cf_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Operating Cash Flow from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=OP_CF_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=2)


def get_op_cf_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Operating Cash Flow from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=OP_CF_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=3)


def get_capex(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Capital Expenditure(s) from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=CAPEX_LINE_ITEM,
                          statement=CF_STATEMENT)


def get_capex_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Capital Expenditure(s) from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=CAPEX_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=2)


def get_capex_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Capital Expenditure(s) from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=CAPEX_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=3)


def get_deprec_and_amort(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Depreciation & Amortization from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DnA_LINE_ITEM,
                          statement=CF_STATEMENT)


def get_deprec_and_amort_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Depreciation & Amortization from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DnA_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=2)


def get_deprec_and_amort_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Depreciation & Amortization from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DnA_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=3)


def get_div(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Dividend from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DIV_LINE_ITEM,
                          statement=CF_STATEMENT)


def get_div_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Dividend from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DIV_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=2)


def get_div_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Dividend from Cash Flow Statement."""

    return query_fin_data(args,
                          line_item=DIV_LINE_ITEM,
                          statement=CF_STATEMENT,
                          n_years=3)
