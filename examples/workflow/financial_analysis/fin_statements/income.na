"""Income Statement Items."""


from ..utils import query_fin_data, CompanyAndPeriodAndCurrency, CurrAndPrevNums


__all__ = [
    'get_rev', 'get_rev_2y', 'get_rev_3y',

    'get_cogs', 'get_cogs_2y', 'get_cogs_3y',

    'get_gross_income', 'get_gross_income_2y', 'get_gross_income_3y',

    'get_ga_exp', 'get_ga_exp_2y', 'get_ga_exp_3y',

    'get_op_income', 'get_op_income_2y', 'get_op_income_3y',

    'get_ebit', 'get_ebit_2y', 'get_ebit_3y',

    'get_int_exp', 'get_int_exp_2y', 'get_int_exp_3y',

    'get_ebt', 'get_ebt_2y', 'get_ebt_3y',

    'get_tax_exp', 'get_tax_exp_2y', 'get_tax_exp_3y',

    'get_net_income', 'get_net_income_2y', 'get_net_income_3y',
]


# TODO: multi-line string concatenation
INCOME_STATEMENT: str = '(Consolidated) Income Statement, a.k.a. (Consolidated) Profit-and-Loss (P&L) Statement, or (Consolidated) Earnings Statement, or (Consolidated) Operations Statement'


REV_LINE_ITEM: str = '(Total) (Net) (Operating) Revenue(s), a.k.a. (Total) (Net) Sales'

# TODO: multi-line string concatenation
COGS_LINE_ITEM: str = '(Total) Cost of Goods Sold, a.k.a. (Total) COGS, or (Total) Cost of Sales, or (Total) Cost of Revenue'

GROSS_INCOME_LINE_ITEM: str = 'Gross Income, a.k.a. Gross Profit, or Gross Earnings (or Loss(es))'

GnA_EXP_LINE_ITEM: str = 'General and Administrative Expenses, a.k.a. G&A Expenses'

# TODO: multi-line string concatenation
OP_INCOME_LINE_ITEM: str = '(Unadjusted) Operating Income, a.k.a. Operating Profit, or Operating Earnings (or Loss(es))'

EBIT_LINE_ITEM: str = 'Earnings before Interest & Tax, a.k.a. EBIT'

INT_EXP_LINE_ITEM: str = 'Interest Expense'

EBT_LINE_ITEM: str = 'Income or Profit or Earnings (or Loss(es)) before (Income) Tax(es)'

TAX_EXP_LINE_ITEM: str = '(Income) Tax Expense'

# TODO: multi-line string concatenation
NET_INCOME_LINE_ITEM: str = 'Net Income, a.k.a. Net Profit, or Net Earnings (or Loss(es)) (Attributable to Shareholders)'


def get_rev(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Revenue from Income Statement."""

    return query_fin_data(args,
                          line_item=REV_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_rev_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Revenue from Income Statement."""

    return query_fin_data(args,
                          line_item=REV_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_rev_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Revenue from Income Statement."""

    return query_fin_data(args,
                          line_item=REV_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_cogs(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Cost of Goods Sold from Income Statement."""

    return query_fin_data(args,
                          line_item=COGS_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_cogs_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Cost of Goods Sold from Income Statement."""

    return query_fin_data(args,
                          line_item=COGS_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_cogs_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Cost of Goods Sold from Income Statement."""

    return query_fin_data(args,
                          line_item=COGS_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_gross_income(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Gross Income from Income Statement."""

    return query_fin_data(args,
                          line_item=GROSS_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_gross_income_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Gross Income from Income Statement."""

    return query_fin_data(args,
                          line_item=GROSS_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_gross_income_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Gross Income from Income Statement."""

    return query_fin_data(args,
                          line_item=GROSS_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_ga_exp(args: CompanyAndPeriodAndCurrency) -> float:
    """Get General and Administrative Expenses from Income Statement."""

    return query_fin_data(args,
                          line_item=GnA_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_ga_exp_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of General and Administrative Expenses from Income Statement."""

    return query_fin_data(args,
                          line_item=GnA_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_ga_exp_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of General and Administrative Expenses from Income Statement."""

    return query_fin_data(args,
                          line_item=GnA_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_op_income(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Operating Income from Income Statement."""

    return query_fin_data(args,
                          line_item=OP_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_op_income_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Operating Income from Income Statement."""

    return query_fin_data(args,
                          line_item=OP_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_op_income_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Operating Income from Income Statement."""

    return query_fin_data(args,
                          line_item=OP_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_ebit(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Earnings before Interest & Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBIT_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_ebit_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Earnings before Interest & Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBIT_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_ebit_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Earnings before Interest & Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBIT_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_int_exp(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Interest Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=INT_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_int_exp_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Interest Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=INT_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_int_exp_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Interest Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=INT_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_ebt(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Earnings before Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBT_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_ebt_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Earnings before Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBT_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_ebt_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Earnings before Tax from Income Statement."""

    return query_fin_data(args,
                          line_item=EBT_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_tax_exp(args: CompanyAndPeriodAndCurrency) -> float:
    """Get (Income) Tax Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=TAX_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_tax_exp_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of (Income) Tax Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=TAX_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_tax_exp_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of (Income) Tax Expense from Income Statement."""

    return query_fin_data(args,
                          line_item=TAX_EXP_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)


def get_net_income(args: CompanyAndPeriodAndCurrency) -> float:
    """Get Net Income from Income Statement."""

    return query_fin_data(args,
                          line_item=NET_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT)


def get_net_income_2y(args: CompanyAndPeriodAndCurrency) -> CurrAndPrevNums:
    """Get 2 years of Net Income from Income Statement."""

    return query_fin_data(args,
                          line_item=NET_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=2)


def get_net_income_3y(args: CompanyAndPeriodAndCurrency) -> tuple[float]:
    """Get 3 years of Net Income from Income Statement."""

    return query_fin_data(args,
                          line_item=NET_INCOME_LINE_ITEM,
                          statement=INCOME_STATEMENT,
                          n_years=3)
