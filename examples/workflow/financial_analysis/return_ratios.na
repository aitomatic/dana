"""Return on Capital Metrics."""


# TODO: parenthesized importing in Dana
# from .fin_statements import (
#     get_total_asset_2y,
#     get_equity_2y,
#     get_net_income,
# )
from .fin_statements import get_total_asset_2y, get_equity_2y, get_net_income

from .utils import over_avg_denom, FinQueryArgs


__all__ = [
    'calc_roa_ratio',
    'calc_roe_ratio',
]


def _calc_roa_ratio_pct(intermediate_results: list[float]) -> float:
    return reason(
f'Calculate `Return on (Total) Assets, a.k.a. RoA or RoTA`
as percentage value according to formula:

`Return on (Total) Assets, a.k.a. RoA or RoTA` = (
    `Net Income, a.k.a. Net Profit, or Net Earnings (or Loss(es)) (Attributable to Shareholders)` /
    `average Total Assets, typically between two consecutive fiscal year-ends`
)

and using the following intermediate results:

```
{intermediate_results}
```
')

def calc_roa_ratio(args: FinQueryArgs) -> float = [get_net_income, get_total_asset_2y] | _calc_roa_ratio_pct


def _calc_roe_ratio_pct(intermediate_results: list[float]) -> float:
    return reason(
f'Calculate `Return on Equity, a.k.a. RoE`
as percentage value according to formula:

`Return on Equity, a.k.a. RoE` = (
    `Net Income, a.k.a. Net Profit, or Net Earnings (or Loss(es)) (Attributable to Shareholders)` /
    `average Equity, typically between two consecutive fiscal year-ends`
)

and using the following intermediate results:

```
{intermediate_results}
```
')

def calc_roe_ratio(args: FinQueryArgs) -> float = [get_net_income, get_equity_2y] | _calc_roe_ratio_pct
