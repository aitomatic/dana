"""Test Capital Intensity/Intensiveness Metrics."""

# TODO: relative importing & parenthesized importing in Dana
# from cap_intens import (
#     calc_fixed_asset_over_total_asset,
#
#     calc_total_asset_over_rev,
#
#     calc_capex_over_rev, calc_capex_over_rev_3y_avg,
#
#     assess_cap_intens,
# )
from cap_intens import calc_fixed_asset_over_total_asset
from cap_intens import calc_total_asset_over_rev
from cap_intens import calc_capex_over_rev, calc_capex_over_rev_3y_avg
from cap_intens import assess_cap_intens

from test import TEST_DOC_PATH

from tqdm.py import tqdm

FUNCS_TO_TEST: dict[str, callable] = {
    'calc_fixed_asset_over_total_asset': calc_fixed_asset_over_total_asset,

    'calc_total_asset_over_rev': calc_total_asset_over_rev,

    'calc_capex_over_rev': calc_capex_over_rev,
    'calc_capex_over_rev_3y_avg': calc_capex_over_rev_3y_avg,

    'assess_cap_intens': assess_cap_intens,
}

def __main__(func_name: str = 'all'):
    with use('rag', sources=[TEST_DOC_PATH]) as test_docs:
        if func_name in FUNCS_TO_TEST:
            print(f'TESTING {func_name}...')
            print(FUNCS_TO_TEST[func_name]())

        else:
            for func_name in FUNCS_TO_TEST:  # TODO: key-value pair unpacking in Dana
                print(f'TESTING {func_name}...')
                print(FUNCS_TO_TEST[func_name]())
