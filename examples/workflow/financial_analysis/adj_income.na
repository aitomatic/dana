"""Adjusted Income Metrics."""


# TODO: parenthesized imports
# from .fin_statements import (
#     get_op_income, get_op_income_2y, get_op_income_3y,
#
#     get_deprec_and_amort, get_deprec_and_amort_2y, get_deprec_and_amort_3y,
# )
from .fin_statements import get_op_income, get_op_income_2y, get_op_income_3y
from .fin_statements import get_deprec_and_amort, get_deprec_and_amort_2y, get_deprec_and_amort_3y

from .utils import FinQueryArgs, CurrAndPrevNums


__all__ = [
    'calc_ebitda', 'calc_ebitda_2y', 'calc_ebitda_3y',
]


def _calc_ebitda_sum(intermediate_results: list[float]) -> float:
    return reason(
f'Calculate `(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA`
according to formula:

`(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA` = (
    `(Unadjusted) Operating Income, a.k.a. Operating Profit, or Operating Earnings (or Loss(es))` +
    `Depreciation & Amortization, a.k.a. D&A (of Fixed Assets or Property, Plant & Equipment (PP&E))`
)

and using the following intermediate results:

```
{intermediate_results}
```
')

def calc_ebitda(args: FinQueryArgs) -> float = [get_op_income, get_deprec_and_amort] | _calc_ebitda_sum


def _calc_ebitda_2y_sum(intermediate_results: list[CurrAndPrevNums]) -> CurrAndPrevNums:
    return reason(
f'Calculate `(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA`
for past 2 annual fiscal periods according to formula:

`(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA` = (
    `(Unadjusted) Operating Income, a.k.a. Operating Profit, or Operating Earnings (or Loss(es))` +
    `Depreciation & Amortization, a.k.a. D&A (of Fixed Assets or Property, Plant & Equipment (PP&E))`
)

and using the following intermediate results:

```
{intermediate_results}
```
')

def calc_ebitda_2y(args: FinQueryArgs) -> CurrAndPrevNums = [get_op_income_2y, get_deprec_and_amort_2y] | _calc_ebitda_2y_sum


def _calc_ebitda_3y_sum(intermediate_results: list[tuple[float]]) -> tuple[float]:
    return reason(
f'Calculate `(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA`
for past 3 annual fiscal periods according to formula:

`(Unadjusted) Earnings before Interest, Tax, Depreciation & Amortization, a.k.a. EBITDA` = (
    `(Unadjusted) Operating Income, a.k.a. Operating Profit, or Operating Earnings (or Loss(es))` +
    `Depreciation & Amortization, a.k.a. D&A (of Fixed Assets or Property, Plant & Equipment (PP&E))`
)

and using the following intermediate results:

```
{intermediate_results}
```
')

def calc_ebitda_3y(args: FinQueryArgs) -> tuple[float] = [get_op_income_3y, get_deprec_and_amort_3y] | _calc_ebitda_3y_sum
