# Business Workflow Example - Dana Function Composition
# Demonstrates real-world business processing with pipelines

print("ðŸ’¼ Starting Business Dana Workflow")

# Define business logic functions
def calculate_tax(amount: float) -> float:
    return amount * 1.15

def add_processing_fee(amount: float) -> float:
    return amount + 25.00

def format_invoice(amount: float) -> str:
    return "Total: $" + str(round(amount, 2))

def apply_discount(amount: float, discount_rate: float = 0.1) -> float:
    return amount * (1 - discount_rate)

# Create business pipeline using | operator
invoice_pipeline = apply_discount | calculate_tax | add_processing_fee | format_invoice

# Execute business workflow
print("ðŸ“Š Executing business pipeline: discount â†’ tax â†’ fee â†’ format")
original_amount = 100.00
result = invoice_pipeline(original_amount)

print(f"ðŸ’° Original amount: ${original_amount}")
print(f"âœ… Final invoice: {result}")

# Alternative with different discount rate via separate function
def apply_twenty_percent_discount(amount: float) -> float:
    return apply_discount(amount, 0.2)

print("\nðŸ”§ Testing with 20% discount:")
discounted_pipeline = apply_twenty_percent_discount | calculate_tax | add_processing_fee | format_invoice
custom_result = discounted_pipeline(100.00)
print(f"âœ… 20% discount invoice: {custom_result}")

print("ðŸ’¼ Business workflow complete!")