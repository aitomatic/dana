# Result Ranking Module
# Handles intelligent ranking and result assembly using LLM reasoning

from prompts import get_ranking_prompt
from config import SEARCH_CONFIG
from modules.data_access import format_results_for_ranking

def rank_results(query: str, results: list) -> dict:
    """Intelligent ranking using LLM to select best match"""
    if not results:
        return {
            "query": query,
            "best_match": null,
            "total_results": 0,
            "confidence": 0.0,
            "meets_threshold": false,
            "reasoning": "No results found"
        }
    
    formatted = format_results_for_ranking(results)
    prompt = get_ranking_prompt(query, formatted)
    
    ranking: dict = reason(prompt)
    
    # Validate confidence against threshold
    confidence = ranking.get("confidence_score", 0.0)
    meets_threshold = confidence >= SEARCH_CONFIG.confidence_threshold
    
    best_match = null
    if meets_threshold and ranking.get("item_index", 0) > 0:
        best_match = results[ranking["item_index"] - 1]
    
    return {
        "query": query,
        "results": results,
        "best_match": best_match,
        "total_results": len(results),
        "confidence": confidence,
        "meets_threshold": meets_threshold,
        "reasoning": ranking.get("notes", "")
    }
