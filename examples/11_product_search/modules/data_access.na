# Data Access and Utilities Module
# Handles result standardization, deduplication, and data formatting

def standardize_vector_results(items: list) -> list:
    """Convert tabular_index results to standardized format"""
    standardized = []
    for item in items:
        metadata = item.get("metadata", {})
        
        standardized.append({
            "product_name": str(item.get("text", "")),
            "mfr_part_num": str(metadata.get("mfr_part_num", "")),
            "mfr_brand": str(metadata.get("mfr_brand", "")),
            "source_category": str(metadata.get("source_category", "")),
            "data_source": str(metadata.get("data_source", "vector_search")),
            "search_strategy": "vector_similarity",
            "confidence_level": "medium"
        })
    
    return standardized

def dedupe_results(results: list, max_results: int) -> list:
    """Remove duplicates based on part number and limit results"""
    seen_parts = []  # Use list instead of set for Dana compatibility
    deduped = []
    
    for result in results:
        part_num = result.get("mfr_part_num", "").lower()
        
        # Add if not a duplicate and under max limit
        if part_num not in seen_parts and len(deduped) < max_results:
            deduped.append(result)
            if part_num:  # Only track non-empty part numbers
                seen_parts.append(part_num)
    
    return deduped

def format_results_for_ranking(results: list) -> str:
    """Format search results for LLM ranking prompt"""
    if not results:
        return "No results found."
    
    formatted_lines = []
    for i in range(len(results)):
        result = results[i]
        idx = i + 1  # 1-based indexing for display
        lines = [
            f"Result #{idx}:",
            f"Product Name: {result['product_name']}",
            f"Part Number: {result['mfr_part_num']}",
            f"Brand: {result['mfr_brand']}",
            f"Category: {result['source_category']}",
            f"Source: {result['data_source']}"
        ]
        formatted_lines.append("\n".join(lines))
    
    return "\n\n".join(formatted_lines)
