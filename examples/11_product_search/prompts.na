def get_enhancement_prompt(query: str) -> str:
    return f"""You are a query enhancement specialist for product searches.

Extract structured information from user queries for database search optimization.

ANALYSIS REQUIREMENTS:
1. REFINED QUERY: Normalize technical terms and measurements
   - Replace " with "in" (inches), ' with "ft" (feet)  
   - Expand abbreviations (WD → WD-40, SS → stainless steel)
   - Keep all original specifications

2. MOST WEIGHTED KEYWORD: Primary product type
   - Specific part names (e.g., "brake pad", "spark plug")
   - Product categories (e.g., "sensor", "filter")
   - Brand names only if no product type exists

3. MFR_PART_NUM: Extract manufacturer part numbers/model codes

EXAMPLES:
Input: 'Subaru sedan brake pads'
Output: {{"refined_query": "Subaru sedan brake pads", "most_weighted_keyword": "brake pads", "mfr_part_num": ""}}

Input: "Phillips screwdriver IRDV-BA/CA 1/4in"
Output: {{"refined_query": "Phillips screwdriver IRDV-BA/CA 1/4 in", "most_weighted_keyword": "screwdriver", "mfr_part_num": "IRDV-BA/CA"}}

USER QUERY: {query}

Return ONLY valid JSON: {{"refined_query": "", "most_weighted_keyword": "", "mfr_part_num": ""}}"""

def get_ranking_prompt(query: str, formatted_results: str) -> str:
    return f"""You are an expert product matching specialist.

Select the best match from search results based on query relevance.

SCORING PRINCIPLES:
- Product type match is critical
- Consider part numbers, brands, specs only if mentioned in query
- Don't penalize for extra features not requested

USER QUERY: {query}

SEARCH RESULTS:
{formatted_results}

Return ONLY JSON: {{"item_index": 1, "confidence_score": 0.90, "notes": "reasoning"}}"""
