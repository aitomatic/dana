log_level("warn")

# Main Product Search Orchestrator
# Coordinates the 4-step search pipeline using modular components

from modules.query_enhancement import enhance_query
from modules.product_search import search_products
from modules.result_ranking import rank_results
from config import MODEL_CONFIG
from time.py import time

set_model(MODEL_CONFIG.model_name)

# ===== MAIN PRODUCT SEARCH FUNCTION =====

def product_search(query: str) -> dict:
    """
    Main product search function - consolidated 4-step pipeline
    Query → Enhancement → Search → Ranking → Response
    """
    start_time = time()
    
    # Step 1: Query Enhancement with reason()
    enhanced = enhance_query(query)
    
    # Step 2: Search with native Dana
    results = search_products(enhanced)
    
    # Step 3: Intelligent ranking with reason()
    ranked = rank_results(query, results)
    
    # Add processing time
    ranked["processing_time"] = time() - start_time
    
    return ranked

# ===== TEST FUNCTIONS =====

def test_enhancement():
    """Test query enhancement functionality"""
    result = enhance_query("Subaru sedan brake pads")
    print(f"Enhancement result: {result}")
    return result

def test_search():
    """Test search functionality"""
    query = "Subaru sedan brake pads"
    enhanced = enhance_query(query)
    results = search_products(enhanced)
    print(f"Search results: {results}")
    return results

def test_full_pipeline():
    """Test complete product search pipeline"""
    return product_search("Subaru sedan brake pads")

def main():
    """Main function to demonstrate the search functionality"""
    query = "Subaru sedan brake pads"
    response = product_search(query)
    
    print("=== DANA PRODUCT SEARCH RESULT ===")
    print(f"Query: {response['query']}")
    print(f"Total Results: {response['total_results']}")
    print(f"Confidence Score: {response['confidence']}")
    print(f"Processing Time: {response['processing_time']}s")
    
    if response['best_match']:
        print(f"Best Match: {response['best_match']['product_name']}")
        print(f"Part Number: {response['best_match']['mfr_part_num']}")
        print(f"Brand: {response['best_match']['mfr_brand']}")
    else:
        print("No suitable match found")
    
    print(f"Reasoning: {response['reasoning']}")
    
    return response

main()